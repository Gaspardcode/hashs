<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="789.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="789.00"> </text><svg id="frames" x="10" width="1180" total_samples="27579222510"><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (77,974,122 samples, 0.28%)</title><rect x="0.0000%" y="725" width="0.2827%" height="15" fill="rgb(227,0,7)" fg:x="1508" fg:w="77974122"/><text x="0.2500%" y="735.50"></text></g><g><title>alloc::string::String::push_str (77,974,122 samples, 0.28%)</title><rect x="0.0000%" y="709" width="0.2827%" height="15" fill="rgb(217,0,24)" fg:x="1508" fg:w="77974122"/><text x="0.2500%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (77,974,122 samples, 0.28%)</title><rect x="0.0000%" y="693" width="0.2827%" height="15" fill="rgb(221,193,54)" fg:x="1508" fg:w="77974122"/><text x="0.2500%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (77,974,122 samples, 0.28%)</title><rect x="0.0000%" y="677" width="0.2827%" height="15" fill="rgb(248,212,6)" fg:x="1508" fg:w="77974122"/><text x="0.2500%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (77,974,122 samples, 0.28%)</title><rect x="0.0000%" y="661" width="0.2827%" height="15" fill="rgb(208,68,35)" fg:x="1508" fg:w="77974122"/><text x="0.2500%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (77,974,122 samples, 0.28%)</title><rect x="0.0000%" y="645" width="0.2827%" height="15" fill="rgb(232,128,0)" fg:x="1508" fg:w="77974122"/><text x="0.2500%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (77,974,122 samples, 0.28%)</title><rect x="0.0000%" y="629" width="0.2827%" height="15" fill="rgb(207,160,47)" fg:x="1508" fg:w="77974122"/><text x="0.2500%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (77,974,122 samples, 0.28%)</title><rect x="0.0000%" y="613" width="0.2827%" height="15" fill="rgb(228,23,34)" fg:x="1508" fg:w="77974122"/><text x="0.2500%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (77,974,122 samples, 0.28%)</title><rect x="0.0000%" y="597" width="0.2827%" height="15" fill="rgb(218,30,26)" fg:x="1508" fg:w="77974122"/><text x="0.2500%" y="607.50"></text></g><g><title>[[heap]] (6,687,713 samples, 0.02%)</title><rect x="0.2827%" y="725" width="0.0242%" height="15" fill="rgb(220,122,19)" fg:x="77975630" fg:w="6687713"/><text x="0.5327%" y="735.50"></text></g><g><title>core::fmt::write (6,687,713 samples, 0.02%)</title><rect x="0.2827%" y="709" width="0.0242%" height="15" fill="rgb(250,228,42)" fg:x="77975630" fg:w="6687713"/><text x="0.5327%" y="719.50"></text></g><g><title>core::fmt::run (6,687,713 samples, 0.02%)</title><rect x="0.2827%" y="693" width="0.0242%" height="15" fill="rgb(240,193,28)" fg:x="77975630" fg:w="6687713"/><text x="0.5327%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (6,687,713 samples, 0.02%)</title><rect x="0.2827%" y="677" width="0.0242%" height="15" fill="rgb(216,20,37)" fg:x="77975630" fg:w="6687713"/><text x="0.5327%" y="687.50"></text></g><g><title>core::fmt::num::&lt;impl core::fmt::LowerHex for i32&gt;::fmt (6,687,713 samples, 0.02%)</title><rect x="0.2827%" y="661" width="0.0242%" height="15" fill="rgb(206,188,39)" fg:x="77975630" fg:w="6687713"/><text x="0.5327%" y="671.50"></text></g><g><title>asm_sysvec_hyperv_stimer0 (6,687,713 samples, 0.02%)</title><rect x="0.2827%" y="645" width="0.0242%" height="15" fill="rgb(217,207,13)" fg:x="77975630" fg:w="6687713"/><text x="0.5327%" y="655.50"></text></g><g><title>_int_free (207,523,575 samples, 0.75%)</title><rect x="0.8935%" y="453" width="0.7525%" height="15" fill="rgb(231,73,38)" fg:x="246427546" fg:w="207523575"/><text x="1.1435%" y="463.50"></text></g><g><title>tcache_put (42,307,639 samples, 0.15%)</title><rect x="1.4926%" y="437" width="0.1534%" height="15" fill="rgb(225,20,46)" fg:x="411643482" fg:w="42307639"/><text x="1.7426%" y="447.50"></text></g><g><title>__GI___libc_free (320,177,020 samples, 1.16%)</title><rect x="0.5116%" y="469" width="1.1609%" height="15" fill="rgb(210,31,41)" fg:x="141101683" fg:w="320177020"/><text x="0.7616%" y="479.50"></text></g><g><title>arena_for_chunk (7,327,582 samples, 0.03%)</title><rect x="1.6460%" y="453" width="0.0266%" height="15" fill="rgb(221,200,47)" fg:x="453951121" fg:w="7327582"/><text x="1.8960%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (370,914,828 samples, 1.34%)</title><rect x="0.5116%" y="581" width="1.3449%" height="15" fill="rgb(226,26,5)" fg:x="141101683" fg:w="370914828"/><text x="0.7616%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (370,914,828 samples, 1.34%)</title><rect x="0.5116%" y="565" width="1.3449%" height="15" fill="rgb(249,33,26)" fg:x="141101683" fg:w="370914828"/><text x="0.7616%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (370,914,828 samples, 1.34%)</title><rect x="0.5116%" y="549" width="1.3449%" height="15" fill="rgb(235,183,28)" fg:x="141101683" fg:w="370914828"/><text x="0.7616%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (370,914,828 samples, 1.34%)</title><rect x="0.5116%" y="533" width="1.3449%" height="15" fill="rgb(221,5,38)" fg:x="141101683" fg:w="370914828"/><text x="0.7616%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (370,914,828 samples, 1.34%)</title><rect x="0.5116%" y="517" width="1.3449%" height="15" fill="rgb(247,18,42)" fg:x="141101683" fg:w="370914828"/><text x="0.7616%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (370,914,828 samples, 1.34%)</title><rect x="0.5116%" y="501" width="1.3449%" height="15" fill="rgb(241,131,45)" fg:x="141101683" fg:w="370914828"/><text x="0.7616%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (370,914,828 samples, 1.34%)</title><rect x="0.5116%" y="485" width="1.3449%" height="15" fill="rgb(249,31,29)" fg:x="141101683" fg:w="370914828"/><text x="0.7616%" y="495.50"></text></g><g><title>__rdl_dealloc (50,737,808 samples, 0.18%)</title><rect x="1.6726%" y="469" width="0.1840%" height="15" fill="rgb(225,111,53)" fg:x="461278703" fg:w="50737808"/><text x="1.9226%" y="479.50"></text></g><g><title>_int_free (135,081,347 samples, 0.49%)</title><rect x="2.2884%" y="453" width="0.4898%" height="15" fill="rgb(238,160,17)" fg:x="631124310" fg:w="135081347"/><text x="2.5384%" y="463.50"></text></g><g><title>free_perturb (7,318,551 samples, 0.03%)</title><rect x="2.7517%" y="437" width="0.0265%" height="15" fill="rgb(214,148,48)" fg:x="758887106" fg:w="7318551"/><text x="3.0017%" y="447.50"></text></g><g><title>__GI___libc_free (191,913,030 samples, 0.70%)</title><rect x="2.1307%" y="469" width="0.6959%" height="15" fill="rgb(232,36,49)" fg:x="587626866" fg:w="191913030"/><text x="2.3807%" y="479.50"></text></g><g><title>arena_for_chunk (13,334,239 samples, 0.05%)</title><rect x="2.7782%" y="453" width="0.0483%" height="15" fill="rgb(209,103,24)" fg:x="766205657" fg:w="13334239"/><text x="3.0282%" y="463.50"></text></g><g><title>shas::sha::Sha256::clear (358,749,215 samples, 1.30%)</title><rect x="1.8565%" y="581" width="1.3008%" height="15" fill="rgb(229,88,8)" fg:x="512016511" fg:w="358749215"/><text x="2.1065%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (303,941,982 samples, 1.10%)</title><rect x="2.0553%" y="565" width="1.1021%" height="15" fill="rgb(213,181,19)" fg:x="566823744" fg:w="303941982"/><text x="2.3053%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (303,941,982 samples, 1.10%)</title><rect x="2.0553%" y="549" width="1.1021%" height="15" fill="rgb(254,191,54)" fg:x="566823744" fg:w="303941982"/><text x="2.3053%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (303,941,982 samples, 1.10%)</title><rect x="2.0553%" y="533" width="1.1021%" height="15" fill="rgb(241,83,37)" fg:x="566823744" fg:w="303941982"/><text x="2.3053%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (283,138,860 samples, 1.03%)</title><rect x="2.1307%" y="517" width="1.0266%" height="15" fill="rgb(233,36,39)" fg:x="587626866" fg:w="283138860"/><text x="2.3807%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (283,138,860 samples, 1.03%)</title><rect x="2.1307%" y="501" width="1.0266%" height="15" fill="rgb(226,3,54)" fg:x="587626866" fg:w="283138860"/><text x="2.3807%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (283,138,860 samples, 1.03%)</title><rect x="2.1307%" y="485" width="1.0266%" height="15" fill="rgb(245,192,40)" fg:x="587626866" fg:w="283138860"/><text x="2.3807%" y="495.50"></text></g><g><title>__rdl_dealloc (91,225,830 samples, 0.33%)</title><rect x="2.8265%" y="469" width="0.3308%" height="15" fill="rgb(238,167,29)" fg:x="779539896" fg:w="91225830"/><text x="3.0765%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13,493,421 samples, 0.05%)</title><rect x="4.6396%" y="485" width="0.0489%" height="15" fill="rgb(232,182,51)" fg:x="1279568211" fg:w="13493421"/><text x="4.8896%" y="495.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6,959,730 samples, 0.03%)</title><rect x="4.9482%" y="469" width="0.0252%" height="15" fill="rgb(231,60,39)" fg:x="1364680297" fg:w="6959730"/><text x="5.1982%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (459,381,477 samples, 1.67%)</title><rect x="4.9735%" y="421" width="1.6657%" height="15" fill="rgb(208,69,12)" fg:x="1371640027" fg:w="459381477"/><text x="5.2235%" y="431.50"></text></g><g><title>alloc::string::String::as_str (459,381,477 samples, 1.67%)</title><rect x="4.9735%" y="405" width="1.6657%" height="15" fill="rgb(235,93,37)" fg:x="1371640027" fg:w="459381477"/><text x="5.2235%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (459,381,477 samples, 1.67%)</title><rect x="4.9735%" y="389" width="1.6657%" height="15" fill="rgb(213,116,39)" fg:x="1371640027" fg:w="459381477"/><text x="5.2235%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (7,165,728 samples, 0.03%)</title><rect x="6.6132%" y="373" width="0.0260%" height="15" fill="rgb(222,207,29)" fg:x="1823855776" fg:w="7165728"/><text x="6.8632%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (7,165,728 samples, 0.03%)</title><rect x="6.6132%" y="357" width="0.0260%" height="15" fill="rgb(206,96,30)" fg:x="1823855776" fg:w="7165728"/><text x="6.8632%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (7,165,728 samples, 0.03%)</title><rect x="6.6132%" y="341" width="0.0260%" height="15" fill="rgb(218,138,4)" fg:x="1823855776" fg:w="7165728"/><text x="6.8632%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (7,165,728 samples, 0.03%)</title><rect x="6.6132%" y="325" width="0.0260%" height="15" fill="rgb(250,191,14)" fg:x="1823855776" fg:w="7165728"/><text x="6.8632%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (50,374,166 samples, 0.18%)</title><rect x="7.0189%" y="357" width="0.1827%" height="15" fill="rgb(239,60,40)" fg:x="1935771141" fg:w="50374166"/><text x="7.2689%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (6,945,728 samples, 0.03%)</title><rect x="8.0023%" y="293" width="0.0252%" height="15" fill="rgb(206,27,48)" fg:x="2206964656" fg:w="6945728"/><text x="8.2523%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (14,277,857 samples, 0.05%)</title><rect x="8.0023%" y="309" width="0.0518%" height="15" fill="rgb(225,35,8)" fg:x="2206964656" fg:w="14277857"/><text x="8.2523%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (7,332,129 samples, 0.03%)</title><rect x="8.0275%" y="293" width="0.0266%" height="15" fill="rgb(250,213,24)" fg:x="2213910384" fg:w="7332129"/><text x="8.2775%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (138,440,262 samples, 0.50%)</title><rect x="8.8022%" y="277" width="0.5020%" height="15" fill="rgb(247,123,22)" fg:x="2427578630" fg:w="138440262"/><text x="9.0522%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (57,752,982 samples, 0.21%)</title><rect x="9.3042%" y="277" width="0.2094%" height="15" fill="rgb(231,138,38)" fg:x="2566018892" fg:w="57752982"/><text x="9.5542%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (14,353,948 samples, 0.05%)</title><rect x="9.5136%" y="277" width="0.0520%" height="15" fill="rgb(231,145,46)" fg:x="2623771874" fg:w="14353948"/><text x="9.7636%" y="287.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (28,978,465 samples, 0.11%)</title><rect x="10.1837%" y="229" width="0.1051%" height="15" fill="rgb(251,118,11)" fg:x="2808581807" fg:w="28978465"/><text x="10.4337%" y="239.50"></text></g><g><title>__memcpy_avx_unaligned_erms (121,411,537 samples, 0.44%)</title><rect x="15.7926%" y="181" width="0.4402%" height="15" fill="rgb(217,147,25)" fg:x="4355489438" fg:w="121411537"/><text x="16.0426%" y="191.50"></text></g><g><title>__memmove_avx_unaligned (7,148,490 samples, 0.03%)</title><rect x="16.2329%" y="181" width="0.0259%" height="15" fill="rgb(247,81,37)" fg:x="4476900975" fg:w="7148490"/><text x="16.4829%" y="191.50"></text></g><g><title>_int_free (251,648,846 samples, 0.91%)</title><rect x="16.2588%" y="181" width="0.9125%" height="15" fill="rgb(209,12,38)" fg:x="4484049465" fg:w="251648846"/><text x="16.5088%" y="191.50"></text></g><g><title>tcache_put (21,652,305 samples, 0.08%)</title><rect x="17.0927%" y="165" width="0.0785%" height="15" fill="rgb(227,1,9)" fg:x="4714046006" fg:w="21652305"/><text x="17.3427%" y="175.50"></text></g><g><title>checked_request2size (36,356,546 samples, 0.13%)</title><rect x="18.8665%" y="165" width="0.1318%" height="15" fill="rgb(248,47,43)" fg:x="5203225182" fg:w="36356546"/><text x="19.1165%" y="175.50"></text></g><g><title>malloc_consolidate (359,564,421 samples, 1.30%)</title><rect x="18.9983%" y="165" width="1.3038%" height="15" fill="rgb(221,10,30)" fg:x="5239581728" fg:w="359564421"/><text x="19.2483%" y="175.50"></text></g><g><title>unlink_chunk (217,245,696 samples, 0.79%)</title><rect x="19.5143%" y="149" width="0.7877%" height="15" fill="rgb(210,229,1)" fg:x="5381900453" fg:w="217245696"/><text x="19.7643%" y="159.50"></text></g><g><title>_int_realloc (2,030,405,154 samples, 7.36%)</title><rect x="12.9664%" y="197" width="7.3621%" height="15" fill="rgb(222,148,37)" fg:x="3576033957" fg:w="2030405154"/><text x="13.2164%" y="207.50">_int_reall..</text></g><g><title>_int_malloc (870,740,800 samples, 3.16%)</title><rect x="17.1713%" y="181" width="3.1572%" height="15" fill="rgb(234,67,33)" fg:x="4735698311" fg:w="870740800"/><text x="17.4213%" y="191.50">_in..</text></g><g><title>unlink_chunk (7,292,962 samples, 0.03%)</title><rect x="20.3020%" y="165" width="0.0264%" height="15" fill="rgb(247,98,35)" fg:x="5599146149" fg:w="7292962"/><text x="20.5520%" y="175.50"></text></g><g><title>arena_for_chunk (6,685,823 samples, 0.02%)</title><rect x="20.3285%" y="197" width="0.0242%" height="15" fill="rgb(247,138,52)" fg:x="5606439111" fg:w="6685823"/><text x="20.5785%" y="207.50"></text></g><g><title>__GI___libc_realloc (2,795,396,825 samples, 10.14%)</title><rect x="10.3401%" y="213" width="10.1359%" height="15" fill="rgb(213,79,30)" fg:x="2851726241" fg:w="2795396825"/><text x="10.5901%" y="223.50">__GI___libc_rea..</text></g><g><title>checked_request2size (33,998,132 samples, 0.12%)</title><rect x="20.3527%" y="197" width="0.1233%" height="15" fill="rgb(246,177,23)" fg:x="5613124934" fg:w="33998132"/><text x="20.6027%" y="207.50"></text></g><g><title>__rdl_realloc (199,666,014 samples, 0.72%)</title><rect x="20.4760%" y="213" width="0.7240%" height="15" fill="rgb(230,62,27)" fg:x="5647123066" fg:w="199666014"/><text x="20.7260%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,088,959,236 samples, 11.20%)</title><rect x="10.1837%" y="261" width="11.2003%" height="15" fill="rgb(216,154,8)" fg:x="2808581807" fg:w="3088959236"/><text x="10.4337%" y="271.50">&lt;alloc::alloc::G..</text></g><g><title>alloc::alloc::Global::grow_impl (3,088,959,236 samples, 11.20%)</title><rect x="10.1837%" y="245" width="11.2003%" height="15" fill="rgb(244,35,45)" fg:x="2808581807" fg:w="3088959236"/><text x="10.4337%" y="255.50">alloc::alloc::Gl..</text></g><g><title>alloc::alloc::realloc (3,059,980,771 samples, 11.10%)</title><rect x="10.2888%" y="229" width="11.0952%" height="15" fill="rgb(251,115,12)" fg:x="2837560272" fg:w="3059980771"/><text x="10.5388%" y="239.50">alloc::alloc::re..</text></g><g><title>__rust_realloc (50,751,963 samples, 0.18%)</title><rect x="21.2000%" y="213" width="0.1840%" height="15" fill="rgb(240,54,50)" fg:x="5846789080" fg:w="50751963"/><text x="21.4500%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,430,225,321 samples, 12.44%)</title><rect x="9.5656%" y="277" width="12.4377%" height="15" fill="rgb(233,84,52)" fg:x="2638125822" fg:w="3430225321"/><text x="9.8156%" y="287.50">alloc::raw_vec::fin..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (170,810,100 samples, 0.62%)</title><rect x="21.3840%" y="261" width="0.6193%" height="15" fill="rgb(207,117,47)" fg:x="5897541043" fg:w="170810100"/><text x="21.6340%" y="271.50"></text></g><g><title>alloc::raw_vec::layout_array (105,883,768 samples, 0.38%)</title><rect x="22.0033%" y="277" width="0.3839%" height="15" fill="rgb(249,43,39)" fg:x="6068351143" fg:w="105883768"/><text x="22.2533%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::repeat (105,883,768 samples, 0.38%)</title><rect x="22.0033%" y="261" width="0.3839%" height="15" fill="rgb(209,38,44)" fg:x="6068351143" fg:w="105883768"/><text x="22.2533%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::pad_to_align (20,535,303 samples, 0.07%)</title><rect x="22.3128%" y="245" width="0.0745%" height="15" fill="rgb(236,212,23)" fg:x="6153699608" fg:w="20535303"/><text x="22.5628%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::size_rounded_up_to_custom_align (20,535,303 samples, 0.07%)</title><rect x="22.3128%" y="229" width="0.0745%" height="15" fill="rgb(242,79,21)" fg:x="6153699608" fg:w="20535303"/><text x="22.5628%" y="239.50"></text></g><g><title>alloc::raw_vec::min_non_zero_cap (99,818,514 samples, 0.36%)</title><rect x="22.3873%" y="277" width="0.3619%" height="15" fill="rgb(211,96,35)" fg:x="6174234911" fg:w="99818514"/><text x="22.6373%" y="287.50"></text></g><g><title>core::cmp::max (6,797,717 samples, 0.02%)</title><rect x="22.7492%" y="277" width="0.0246%" height="15" fill="rgb(253,215,40)" fg:x="6274053425" fg:w="6797717"/><text x="22.9992%" y="287.50"></text></g><g><title>core::cmp::Ord::max (6,797,717 samples, 0.02%)</title><rect x="22.7492%" y="261" width="0.0246%" height="15" fill="rgb(211,81,21)" fg:x="6274053425" fg:w="6797717"/><text x="22.9992%" y="271.50"></text></g><g><title>core::cmp::max_by (6,797,717 samples, 0.02%)</title><rect x="22.7492%" y="245" width="0.0246%" height="15" fill="rgb(208,190,38)" fg:x="6274053425" fg:w="6797717"/><text x="22.9992%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4,315,619,848 samples, 15.65%)</title><rect x="7.2016%" y="357" width="15.6481%" height="15" fill="rgb(235,213,38)" fg:x="1986145307" fg:w="4315619848"/><text x="7.4516%" y="367.50">alloc::vec::Vec&lt;T,A&gt;::re..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4,308,354,709 samples, 15.62%)</title><rect x="7.2279%" y="341" width="15.6217%" height="15" fill="rgb(237,122,38)" fg:x="1993410446" fg:w="4308354709"/><text x="7.4779%" y="351.50">alloc::raw_vec::RawVec&lt;T..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (4,308,354,709 samples, 15.62%)</title><rect x="7.2279%" y="325" width="15.6217%" height="15" fill="rgb(244,218,35)" fg:x="1993410446" fg:w="4308354709"/><text x="7.4779%" y="335.50">alloc::raw_vec::RawVecIn..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (4,080,522,642 samples, 14.80%)</title><rect x="8.0540%" y="309" width="14.7956%" height="15" fill="rgb(240,68,47)" fg:x="2221242513" fg:w="4080522642"/><text x="8.3040%" y="319.50">alloc::raw_vec::RawVecI..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,909,762,106 samples, 14.18%)</title><rect x="8.6732%" y="293" width="14.1765%" height="15" fill="rgb(210,16,53)" fg:x="2392003049" fg:w="3909762106"/><text x="8.9232%" y="303.50">alloc::raw_vec::RawVec..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (20,914,013 samples, 0.08%)</title><rect x="22.7739%" y="277" width="0.0758%" height="15" fill="rgb(235,124,12)" fg:x="6280851142" fg:w="20914013"/><text x="23.0239%" y="287.50"></text></g><g><title>core::intrinsics::unlikely (6,490,903 samples, 0.02%)</title><rect x="22.8261%" y="261" width="0.0235%" height="15" fill="rgb(224,169,11)" fg:x="6295274252" fg:w="6490903"/><text x="23.0761%" y="271.50"></text></g><g><title>__memcpy_avx_unaligned_erms (394,117,657 samples, 1.43%)</title><rect x="23.1364%" y="341" width="1.4290%" height="15" fill="rgb(250,166,2)" fg:x="6380850269" fg:w="394117657"/><text x="23.3864%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (594,803,647 samples, 2.16%)</title><rect x="22.8497%" y="357" width="2.1567%" height="15" fill="rgb(242,216,29)" fg:x="6301765155" fg:w="594803647"/><text x="23.0997%" y="367.50">c..</text></g><g><title>__memmove_avx_unaligned (121,600,876 samples, 0.44%)</title><rect x="24.5655%" y="341" width="0.4409%" height="15" fill="rgb(230,116,27)" fg:x="6774967926" fg:w="121600876"/><text x="24.8155%" y="351.50"></text></g><g><title>alloc::string::String::push_str (5,255,160,600 samples, 19.05%)</title><rect x="6.6391%" y="421" width="19.0548%" height="15" fill="rgb(228,99,48)" fg:x="1831021504" fg:w="5255160600"/><text x="6.8891%" y="431.50">alloc::string::String::push_str</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5,255,160,600 samples, 19.05%)</title><rect x="6.6391%" y="405" width="19.0548%" height="15" fill="rgb(253,11,6)" fg:x="1831021504" fg:w="5255160600"/><text x="6.8891%" y="415.50">alloc::vec::Vec&lt;T,A&gt;::extend_f..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5,255,160,600 samples, 19.05%)</title><rect x="6.6391%" y="389" width="19.0548%" height="15" fill="rgb(247,143,39)" fg:x="1831021504" fg:w="5255160600"/><text x="6.8891%" y="399.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (5,255,160,600 samples, 19.05%)</title><rect x="6.6391%" y="373" width="19.0548%" height="15" fill="rgb(236,97,10)" fg:x="1831021504" fg:w="5255160600"/><text x="6.8891%" y="383.50">alloc::vec::Vec&lt;T,A&gt;::append_e..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (189,613,302 samples, 0.69%)</title><rect x="25.0064%" y="357" width="0.6875%" height="15" fill="rgb(233,208,19)" fg:x="6896568802" fg:w="189613302"/><text x="25.2564%" y="367.50"></text></g><g><title>asm_sysvec_hyperv_stimer0 (7,255,196 samples, 0.03%)</title><rect x="30.2322%" y="277" width="0.0263%" height="15" fill="rgb(216,164,2)" fg:x="8337809547" fg:w="7255196"/><text x="30.4822%" y="287.50"></text></g><g><title>sysvec_hyperv_stimer0 (7,255,196 samples, 0.03%)</title><rect x="30.2322%" y="261" width="0.0263%" height="15" fill="rgb(220,129,5)" fg:x="8337809547" fg:w="7255196"/><text x="30.4822%" y="271.50"></text></g><g><title>__sysvec_hyperv_stimer0 (7,255,196 samples, 0.03%)</title><rect x="30.2322%" y="245" width="0.0263%" height="15" fill="rgb(242,17,10)" fg:x="8337809547" fg:w="7255196"/><text x="30.4822%" y="255.50"></text></g><g><title>hrtimer_interrupt (7,255,196 samples, 0.03%)</title><rect x="30.2322%" y="229" width="0.0263%" height="15" fill="rgb(242,107,0)" fg:x="8337809547" fg:w="7255196"/><text x="30.4822%" y="239.50"></text></g><g><title>__hrtimer_run_queues (7,255,196 samples, 0.03%)</title><rect x="30.2322%" y="213" width="0.0263%" height="15" fill="rgb(251,28,31)" fg:x="8337809547" fg:w="7255196"/><text x="30.4822%" y="223.50"></text></g><g><title>tick_sched_timer (7,255,196 samples, 0.03%)</title><rect x="30.2322%" y="197" width="0.0263%" height="15" fill="rgb(233,223,10)" fg:x="8337809547" fg:w="7255196"/><text x="30.4822%" y="207.50"></text></g><g><title>tick_sched_do_timer (7,255,196 samples, 0.03%)</title><rect x="30.2322%" y="181" width="0.0263%" height="15" fill="rgb(215,21,27)" fg:x="8337809547" fg:w="7255196"/><text x="30.4822%" y="191.50"></text></g><g><title>update_wall_time (7,255,196 samples, 0.03%)</title><rect x="30.2322%" y="165" width="0.0263%" height="15" fill="rgb(232,23,21)" fg:x="8337809547" fg:w="7255196"/><text x="30.4822%" y="175.50"></text></g><g><title>timekeeping_advance (7,255,196 samples, 0.03%)</title><rect x="30.2322%" y="149" width="0.0263%" height="15" fill="rgb(244,5,23)" fg:x="8337809547" fg:w="7255196"/><text x="30.4822%" y="159.50"></text></g><g><title>timekeeping_update (7,255,196 samples, 0.03%)</title><rect x="30.2322%" y="133" width="0.0263%" height="15" fill="rgb(226,81,46)" fg:x="8337809547" fg:w="7255196"/><text x="30.4822%" y="143.50"></text></g><g><title>update_vsyscall (7,255,196 samples, 0.03%)</title><rect x="30.2322%" y="117" width="0.0263%" height="15" fill="rgb(247,70,30)" fg:x="8337809547" fg:w="7255196"/><text x="30.4822%" y="127.50"></text></g><g><title>__GI___libc_free (1,528,063,063 samples, 5.54%)</title><rect x="25.8767%" y="309" width="5.5406%" height="15" fill="rgb(212,68,19)" fg:x="7136580250" fg:w="1528063063"/><text x="26.1267%" y="319.50">__GI___..</text></g><g><title>_int_free (1,230,623,299 samples, 4.46%)</title><rect x="26.9551%" y="293" width="4.4621%" height="15" fill="rgb(240,187,13)" fg:x="7434020014" fg:w="1230623299"/><text x="27.2051%" y="303.50">_int_..</text></g><g><title>tcache_put (319,578,570 samples, 1.16%)</title><rect x="30.2585%" y="277" width="1.1588%" height="15" fill="rgb(223,113,26)" fg:x="8345064743" fg:w="319578570"/><text x="30.5085%" y="287.50"></text></g><g><title>__rdl_dealloc (86,001,511 samples, 0.31%)</title><rect x="31.4173%" y="309" width="0.3118%" height="15" fill="rgb(206,192,2)" fg:x="8664643313" fg:w="86001511"/><text x="31.6673%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,743,047,412 samples, 6.32%)</title><rect x="25.6939%" y="341" width="6.3201%" height="15" fill="rgb(241,108,4)" fg:x="7086182104" fg:w="1743047412"/><text x="25.9439%" y="351.50">&lt;alloc::..</text></g><g><title>alloc::alloc::dealloc (1,743,047,412 samples, 6.32%)</title><rect x="25.6939%" y="325" width="6.3201%" height="15" fill="rgb(247,173,49)" fg:x="7086182104" fg:w="1743047412"/><text x="25.9439%" y="335.50">alloc::a..</text></g><g><title>__rust_dealloc (78,584,692 samples, 0.28%)</title><rect x="31.7291%" y="309" width="0.2849%" height="15" fill="rgb(224,114,35)" fg:x="8750644824" fg:w="78584692"/><text x="31.9791%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (7,501,246,100 samples, 27.20%)</title><rect x="4.9735%" y="453" width="27.1989%" height="15" fill="rgb(245,159,27)" fg:x="1371640027" fg:w="7501246100"/><text x="5.2235%" y="463.50">core::iter::traits::iterator::Iterator::for_..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend::_{{closure}} (7,501,246,100 samples, 27.20%)</title><rect x="4.9735%" y="437" width="27.1989%" height="15" fill="rgb(245,172,44)" fg:x="1371640027" fg:w="7501246100"/><text x="5.2235%" y="447.50">&lt;alloc::string::String as core::iter::traits..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,786,704,023 samples, 6.48%)</title><rect x="25.6939%" y="421" width="6.4784%" height="15" fill="rgb(236,23,11)" fg:x="7086182104" fg:w="1786704023"/><text x="25.9439%" y="431.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,786,704,023 samples, 6.48%)</title><rect x="25.6939%" y="405" width="6.4784%" height="15" fill="rgb(205,117,38)" fg:x="7086182104" fg:w="1786704023"/><text x="25.9439%" y="415.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,786,704,023 samples, 6.48%)</title><rect x="25.6939%" y="389" width="6.4784%" height="15" fill="rgb(237,72,25)" fg:x="7086182104" fg:w="1786704023"/><text x="25.9439%" y="399.50">core::pt..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,786,704,023 samples, 6.48%)</title><rect x="25.6939%" y="373" width="6.4784%" height="15" fill="rgb(244,70,9)" fg:x="7086182104" fg:w="1786704023"/><text x="25.9439%" y="383.50">&lt;alloc::..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1,786,704,023 samples, 6.48%)</title><rect x="25.6939%" y="357" width="6.4784%" height="15" fill="rgb(217,125,39)" fg:x="7086182104" fg:w="1786704023"/><text x="25.9439%" y="367.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (43,656,611 samples, 0.16%)</title><rect x="32.0141%" y="341" width="0.1583%" height="15" fill="rgb(235,36,10)" fg:x="8829229516" fg:w="43656611"/><text x="32.2641%" y="351.50"></text></g><g><title>alloc::fmt::format::format_inner (196,129,731 samples, 0.71%)</title><rect x="37.4325%" y="373" width="0.7112%" height="15" fill="rgb(251,123,47)" fg:x="10323603587" fg:w="196129731"/><text x="37.6825%" y="383.50"></text></g><g><title>alloc::string::String::with_capacity (6,689,573 samples, 0.02%)</title><rect x="38.1437%" y="373" width="0.0243%" height="15" fill="rgb(221,13,13)" fg:x="10519733318" fg:w="6689573"/><text x="38.3937%" y="383.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (14,551,019 samples, 0.05%)</title><rect x="40.3054%" y="293" width="0.0528%" height="15" fill="rgb(238,131,9)" fg:x="11115919133" fg:w="14551019"/><text x="40.5554%" y="303.50"></text></g><g><title>asm_sysvec_hyperv_stimer0 (6,292,309 samples, 0.02%)</title><rect x="40.3582%" y="293" width="0.0228%" height="15" fill="rgb(211,50,8)" fg:x="11130470152" fg:w="6292309"/><text x="40.6082%" y="303.50"></text></g><g><title>sysvec_hyperv_stimer0 (6,292,309 samples, 0.02%)</title><rect x="40.3582%" y="277" width="0.0228%" height="15" fill="rgb(245,182,24)" fg:x="11130470152" fg:w="6292309"/><text x="40.6082%" y="287.50"></text></g><g><title>__sysvec_hyperv_stimer0 (6,292,309 samples, 0.02%)</title><rect x="40.3582%" y="261" width="0.0228%" height="15" fill="rgb(242,14,37)" fg:x="11130470152" fg:w="6292309"/><text x="40.6082%" y="271.50"></text></g><g><title>hrtimer_interrupt (6,292,309 samples, 0.02%)</title><rect x="40.3582%" y="245" width="0.0228%" height="15" fill="rgb(246,228,12)" fg:x="11130470152" fg:w="6292309"/><text x="40.6082%" y="255.50"></text></g><g><title>__hrtimer_run_queues (6,292,309 samples, 0.02%)</title><rect x="40.3582%" y="229" width="0.0228%" height="15" fill="rgb(213,55,15)" fg:x="11130470152" fg:w="6292309"/><text x="40.6082%" y="239.50"></text></g><g><title>tick_sched_timer (6,292,309 samples, 0.02%)</title><rect x="40.3582%" y="213" width="0.0228%" height="15" fill="rgb(209,9,3)" fg:x="11130470152" fg:w="6292309"/><text x="40.6082%" y="223.50"></text></g><g><title>update_process_times (6,292,309 samples, 0.02%)</title><rect x="40.3582%" y="197" width="0.0228%" height="15" fill="rgb(230,59,30)" fg:x="11130470152" fg:w="6292309"/><text x="40.6082%" y="207.50"></text></g><g><title>trigger_load_balance (6,292,309 samples, 0.02%)</title><rect x="40.3582%" y="181" width="0.0228%" height="15" fill="rgb(209,121,21)" fg:x="11130470152" fg:w="6292309"/><text x="40.6082%" y="191.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (653,206,556 samples, 2.37%)</title><rect x="38.1679%" y="373" width="2.3685%" height="15" fill="rgb(220,109,13)" fg:x="10526422891" fg:w="653206556"/><text x="38.4179%" y="383.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (439,864,124 samples, 1.59%)</title><rect x="38.9415%" y="357" width="1.5949%" height="15" fill="rgb(232,18,1)" fg:x="10739765323" fg:w="439864124"/><text x="39.1915%" y="367.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (439,864,124 samples, 1.59%)</title><rect x="38.9415%" y="341" width="1.5949%" height="15" fill="rgb(215,41,42)" fg:x="10739765323" fg:w="439864124"/><text x="39.1915%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (439,864,124 samples, 1.59%)</title><rect x="38.9415%" y="325" width="1.5949%" height="15" fill="rgb(224,123,36)" fg:x="10739765323" fg:w="439864124"/><text x="39.1915%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (439,864,124 samples, 1.59%)</title><rect x="38.9415%" y="309" width="1.5949%" height="15" fill="rgb(240,125,3)" fg:x="10739765323" fg:w="439864124"/><text x="39.1915%" y="319.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (42,866,986 samples, 0.16%)</title><rect x="40.3810%" y="293" width="0.1554%" height="15" fill="rgb(205,98,50)" fg:x="11136762461" fg:w="42866986"/><text x="40.6310%" y="303.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (42,866,986 samples, 0.16%)</title><rect x="40.3810%" y="277" width="0.1554%" height="15" fill="rgb(205,185,37)" fg:x="11136762461" fg:w="42866986"/><text x="40.6310%" y="287.50"></text></g><g><title>tick_do_update_jiffies64 (7,054,393 samples, 0.03%)</title><rect x="45.2742%" y="181" width="0.0256%" height="15" fill="rgb(238,207,15)" fg:x="12486277169" fg:w="7054393"/><text x="45.5242%" y="191.50"></text></g><g><title>calc_global_load (7,054,393 samples, 0.03%)</title><rect x="45.2742%" y="165" width="0.0256%" height="15" fill="rgb(213,199,42)" fg:x="12486277169" fg:w="7054393"/><text x="45.5242%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (208,500,437 samples, 0.76%)</title><rect x="44.5703%" y="309" width="0.7560%" height="15" fill="rgb(235,201,11)" fg:x="12292153752" fg:w="208500437"/><text x="44.8203%" y="319.50"></text></g><g><title>asm_sysvec_hyperv_stimer0 (14,377,020 samples, 0.05%)</title><rect x="45.2742%" y="293" width="0.0521%" height="15" fill="rgb(207,46,11)" fg:x="12486277169" fg:w="14377020"/><text x="45.5242%" y="303.50"></text></g><g><title>sysvec_hyperv_stimer0 (14,377,020 samples, 0.05%)</title><rect x="45.2742%" y="277" width="0.0521%" height="15" fill="rgb(241,35,35)" fg:x="12486277169" fg:w="14377020"/><text x="45.5242%" y="287.50"></text></g><g><title>__sysvec_hyperv_stimer0 (14,377,020 samples, 0.05%)</title><rect x="45.2742%" y="261" width="0.0521%" height="15" fill="rgb(243,32,47)" fg:x="12486277169" fg:w="14377020"/><text x="45.5242%" y="271.50"></text></g><g><title>hrtimer_interrupt (14,377,020 samples, 0.05%)</title><rect x="45.2742%" y="245" width="0.0521%" height="15" fill="rgb(247,202,23)" fg:x="12486277169" fg:w="14377020"/><text x="45.5242%" y="255.50"></text></g><g><title>__hrtimer_run_queues (14,377,020 samples, 0.05%)</title><rect x="45.2742%" y="229" width="0.0521%" height="15" fill="rgb(219,102,11)" fg:x="12486277169" fg:w="14377020"/><text x="45.5242%" y="239.50"></text></g><g><title>tick_sched_timer (14,377,020 samples, 0.05%)</title><rect x="45.2742%" y="213" width="0.0521%" height="15" fill="rgb(243,110,44)" fg:x="12486277169" fg:w="14377020"/><text x="45.5242%" y="223.50"></text></g><g><title>tick_sched_do_timer (14,377,020 samples, 0.05%)</title><rect x="45.2742%" y="197" width="0.0521%" height="15" fill="rgb(222,74,54)" fg:x="12486277169" fg:w="14377020"/><text x="45.5242%" y="207.50"></text></g><g><title>update_wall_time (7,322,627 samples, 0.03%)</title><rect x="45.2998%" y="181" width="0.0266%" height="15" fill="rgb(216,99,12)" fg:x="12493331562" fg:w="7322627"/><text x="45.5498%" y="191.50"></text></g><g><title>timekeeping_advance (7,322,627 samples, 0.03%)</title><rect x="45.2998%" y="165" width="0.0266%" height="15" fill="rgb(226,22,26)" fg:x="12493331562" fg:w="7322627"/><text x="45.5498%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (271,123,090 samples, 0.98%)</title><rect x="44.5703%" y="325" width="0.9831%" height="15" fill="rgb(217,163,10)" fg:x="12292153752" fg:w="271123090"/><text x="44.8203%" y="335.50"></text></g><g><title>core::fmt::write (62,622,653 samples, 0.23%)</title><rect x="45.3263%" y="309" width="0.2271%" height="15" fill="rgb(213,25,53)" fg:x="12500654189" fg:w="62622653"/><text x="45.5763%" y="319.50"></text></g><g><title>core::fmt::Formatter::new (411,557,585 samples, 1.49%)</title><rect x="45.5534%" y="325" width="1.4923%" height="15" fill="rgb(252,105,26)" fg:x="12563276842" fg:w="411557585"/><text x="45.8034%" y="335.50"></text></g><g><title>core::fmt::getcount (99,461,477 samples, 0.36%)</title><rect x="47.4992%" y="309" width="0.3606%" height="15" fill="rgb(220,39,43)" fg:x="13099905960" fg:w="99461477"/><text x="47.7492%" y="319.50"></text></g><g><title>&lt;&amp;T as core::fmt::LowerHex&gt;::fmt (576,623,050 samples, 2.09%)</title><rect x="48.6392%" y="293" width="2.0908%" height="15" fill="rgb(229,68,48)" fg:x="13414304389" fg:w="576623050"/><text x="48.8892%" y="303.50">&lt;..</text></g><g><title>asm_sysvec_hyperv_stimer0 (7,053,326 samples, 0.03%)</title><rect x="50.7044%" y="277" width="0.0256%" height="15" fill="rgb(252,8,32)" fg:x="13983874113" fg:w="7053326"/><text x="50.9544%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (7,276,773 samples, 0.03%)</title><rect x="54.5939%" y="181" width="0.0264%" height="15" fill="rgb(223,20,43)" fg:x="15056582924" fg:w="7276773"/><text x="54.8439%" y="191.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (377,325,811 samples, 1.37%)</title><rect x="55.4353%" y="101" width="1.3682%" height="15" fill="rgb(229,81,49)" fg:x="15288623468" fg:w="377325811"/><text x="55.6853%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (28,444,490 samples, 0.10%)</title><rect x="56.8034%" y="101" width="0.1031%" height="15" fill="rgb(236,28,36)" fg:x="15665949279" fg:w="28444490"/><text x="57.0534%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::set_ptr_and_cap (7,077,534 samples, 0.03%)</title><rect x="56.9066%" y="101" width="0.0257%" height="15" fill="rgb(249,185,26)" fg:x="15694393769" fg:w="7077534"/><text x="57.1566%" y="111.50"></text></g><g><title>checked_request2size (14,513,818 samples, 0.05%)</title><rect x="61.6414%" y="69" width="0.0526%" height="15" fill="rgb(249,174,33)" fg:x="17000231475" fg:w="14513818"/><text x="61.8914%" y="79.50"></text></g><g><title>__GI___libc_malloc (1,319,656,901 samples, 4.78%)</title><rect x="58.4569%" y="85" width="4.7850%" height="15" fill="rgb(233,201,37)" fg:x="16121958370" fg:w="1319656901"/><text x="58.7069%" y="95.50">__GI__..</text></g><g><title>tcache_get (426,869,978 samples, 1.55%)</title><rect x="61.6941%" y="69" width="1.5478%" height="15" fill="rgb(221,78,26)" fg:x="17014745293" fg:w="426869978"/><text x="61.9441%" y="79.50"></text></g><g><title>__rdl_alloc (50,408,398 samples, 0.18%)</title><rect x="63.2419%" y="85" width="0.1828%" height="15" fill="rgb(250,127,30)" fg:x="17441615271" fg:w="50408398"/><text x="63.4919%" y="95.50"></text></g><g><title>__rust_alloc (189,837,660 samples, 0.69%)</title><rect x="63.4246%" y="85" width="0.6883%" height="15" fill="rgb(230,49,44)" fg:x="17492023669" fg:w="189837660"/><text x="63.6746%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,022,680,917 samples, 7.33%)</title><rect x="56.9322%" y="101" width="7.3341%" height="15" fill="rgb(229,67,23)" fg:x="15701471303" fg:w="2022680917"/><text x="57.1822%" y="111.50">alloc::raw..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (42,290,891 samples, 0.15%)</title><rect x="64.1130%" y="85" width="0.1533%" height="15" fill="rgb(249,83,47)" fg:x="17681861329" fg:w="42290891"/><text x="64.3630%" y="95.50"></text></g><g><title>alloc::raw_vec::layout_array (57,072,426 samples, 0.21%)</title><rect x="64.2663%" y="101" width="0.2069%" height="15" fill="rgb(215,43,3)" fg:x="17724152220" fg:w="57072426"/><text x="64.5163%" y="111.50"></text></g><g><title>core::alloc::layout::Layout::repeat (57,072,426 samples, 0.21%)</title><rect x="64.2663%" y="85" width="0.2069%" height="15" fill="rgb(238,154,13)" fg:x="17724152220" fg:w="57072426"/><text x="64.5163%" y="95.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (35,384,760 samples, 0.13%)</title><rect x="64.3450%" y="69" width="0.1283%" height="15" fill="rgb(219,56,2)" fg:x="17745839886" fg:w="35384760"/><text x="64.5950%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (35,384,760 samples, 0.13%)</title><rect x="64.3450%" y="53" width="0.1283%" height="15" fill="rgb(233,0,4)" fg:x="17745839886" fg:w="35384760"/><text x="64.5950%" y="63.50"></text></g><g><title>core::intrinsics::unlikely (35,384,760 samples, 0.13%)</title><rect x="64.3450%" y="37" width="0.1283%" height="15" fill="rgb(235,30,7)" fg:x="17745839886" fg:w="35384760"/><text x="64.5950%" y="47.50"></text></g><g><title>core::cmp::max (77,825,675 samples, 0.28%)</title><rect x="64.4733%" y="101" width="0.2822%" height="15" fill="rgb(250,79,13)" fg:x="17781224646" fg:w="77825675"/><text x="64.7233%" y="111.50"></text></g><g><title>core::cmp::Ord::max (77,825,675 samples, 0.28%)</title><rect x="64.4733%" y="85" width="0.2822%" height="15" fill="rgb(211,146,34)" fg:x="17781224646" fg:w="77825675"/><text x="64.7233%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (77,825,675 samples, 0.28%)</title><rect x="64.4733%" y="69" width="0.2822%" height="15" fill="rgb(228,22,38)" fg:x="17781224646" fg:w="77825675"/><text x="64.7233%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2,795,067,169 samples, 10.13%)</title><rect x="55.2032%" y="117" width="10.1347%" height="15" fill="rgb(235,168,5)" fg:x="15224622759" fg:w="2795067169"/><text x="55.4532%" y="127.50">alloc::raw_vec:..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (160,639,607 samples, 0.58%)</title><rect x="64.7555%" y="101" width="0.5825%" height="15" fill="rgb(221,155,16)" fg:x="17859050321" fg:w="160639607"/><text x="65.0055%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2,963,142,936 samples, 10.74%)</title><rect x="54.6203%" y="181" width="10.7441%" height="15" fill="rgb(215,215,53)" fg:x="15063859697" fg:w="2963142936"/><text x="54.8703%" y="191.50">alloc::vec::Vec&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2,963,142,936 samples, 10.74%)</title><rect x="54.6203%" y="165" width="10.7441%" height="15" fill="rgb(223,4,10)" fg:x="15063859697" fg:w="2963142936"/><text x="54.8703%" y="175.50">alloc::raw_vec::..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (2,963,142,936 samples, 10.74%)</title><rect x="54.6203%" y="149" width="10.7441%" height="15" fill="rgb(234,103,6)" fg:x="15063859697" fg:w="2963142936"/><text x="54.8703%" y="159.50">alloc::raw_vec::..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2,908,318,790 samples, 10.55%)</title><rect x="54.8191%" y="133" width="10.5453%" height="15" fill="rgb(227,97,0)" fg:x="15118683843" fg:w="2908318790"/><text x="55.0691%" y="143.50">alloc::raw_vec:..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (7,312,705 samples, 0.03%)</title><rect x="65.3379%" y="117" width="0.0265%" height="15" fill="rgb(234,150,53)" fg:x="18019689928" fg:w="7312705"/><text x="65.5879%" y="127.50"></text></g><g><title>__memcpy_avx_unaligned_erms (330,657,050 samples, 1.20%)</title><rect x="65.3644%" y="165" width="1.1989%" height="15" fill="rgb(228,201,54)" fg:x="18027002633" fg:w="330657050"/><text x="65.6144%" y="175.50"></text></g><g><title>asm_sysvec_hyperv_stimer0 (7,227,912 samples, 0.03%)</title><rect x="66.5372%" y="149" width="0.0262%" height="15" fill="rgb(222,22,37)" fg:x="18350431771" fg:w="7227912"/><text x="66.7872%" y="159.50"></text></g><g><title>sysvec_hyperv_stimer0 (7,227,912 samples, 0.03%)</title><rect x="66.5372%" y="133" width="0.0262%" height="15" fill="rgb(237,53,32)" fg:x="18350431771" fg:w="7227912"/><text x="66.7872%" y="143.50"></text></g><g><title>__sysvec_hyperv_stimer0 (7,227,912 samples, 0.03%)</title><rect x="66.5372%" y="117" width="0.0262%" height="15" fill="rgb(233,25,53)" fg:x="18350431771" fg:w="7227912"/><text x="66.7872%" y="127.50"></text></g><g><title>hrtimer_interrupt (7,227,912 samples, 0.03%)</title><rect x="66.5372%" y="101" width="0.0262%" height="15" fill="rgb(210,40,34)" fg:x="18350431771" fg:w="7227912"/><text x="66.7872%" y="111.50"></text></g><g><title>__hrtimer_run_queues (7,227,912 samples, 0.03%)</title><rect x="66.5372%" y="85" width="0.0262%" height="15" fill="rgb(241,220,44)" fg:x="18350431771" fg:w="7227912"/><text x="66.7872%" y="95.50"></text></g><g><title>tick_sched_timer (7,227,912 samples, 0.03%)</title><rect x="66.5372%" y="69" width="0.0262%" height="15" fill="rgb(235,28,35)" fg:x="18350431771" fg:w="7227912"/><text x="66.7872%" y="79.50"></text></g><g><title>update_process_times (7,227,912 samples, 0.03%)</title><rect x="66.5372%" y="53" width="0.0262%" height="15" fill="rgb(210,56,17)" fg:x="18350431771" fg:w="7227912"/><text x="66.7872%" y="63.50"></text></g><g><title>account_user_time (7,227,912 samples, 0.03%)</title><rect x="66.5372%" y="37" width="0.0262%" height="15" fill="rgb(224,130,29)" fg:x="18350431771" fg:w="7227912"/><text x="66.7872%" y="47.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (518,787,982 samples, 1.88%)</title><rect x="65.3644%" y="181" width="1.8811%" height="15" fill="rgb(235,212,8)" fg:x="18027002633" fg:w="518787982"/><text x="65.6144%" y="191.50">c..</text></g><g><title>__memmove_avx_unaligned (188,130,932 samples, 0.68%)</title><rect x="66.5634%" y="165" width="0.6821%" height="15" fill="rgb(223,33,50)" fg:x="18357659683" fg:w="188130932"/><text x="66.8134%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3,998,087,752 samples, 14.50%)</title><rect x="53.5929%" y="261" width="14.4967%" height="15" fill="rgb(219,149,13)" fg:x="14780491660" fg:w="3998087752"/><text x="53.8429%" y="271.50">&lt;alloc::string::String..</text></g><g><title>alloc::string::String::push_str (3,799,636,381 samples, 13.78%)</title><rect x="54.3124%" y="245" width="13.7772%" height="15" fill="rgb(250,156,29)" fg:x="14978943031" fg:w="3799636381"/><text x="54.5624%" y="255.50">alloc::string::String..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3,799,636,381 samples, 13.78%)</title><rect x="54.3124%" y="229" width="13.7772%" height="15" fill="rgb(216,193,19)" fg:x="14978943031" fg:w="3799636381"/><text x="54.5624%" y="239.50">alloc::vec::Vec&lt;T,A&gt;:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3,799,636,381 samples, 13.78%)</title><rect x="54.3124%" y="213" width="13.7772%" height="15" fill="rgb(216,135,14)" fg:x="14978943031" fg:w="3799636381"/><text x="54.5624%" y="223.50">&lt;alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3,799,636,381 samples, 13.78%)</title><rect x="54.3124%" y="197" width="13.7772%" height="15" fill="rgb(241,47,5)" fg:x="14978943031" fg:w="3799636381"/><text x="54.5624%" y="207.50">alloc::vec::Vec&lt;T,A&gt;:..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (232,788,797 samples, 0.84%)</title><rect x="67.2455%" y="181" width="0.8441%" height="15" fill="rgb(233,42,35)" fg:x="18545790615" fg:w="232788797"/><text x="67.4955%" y="191.50"></text></g><g><title>&lt;core::fmt::num::LowerHex as core::fmt::num::GenericRadix&gt;::digit (1,255,322,387 samples, 4.55%)</title><rect x="68.0896%" y="261" width="4.5517%" height="15" fill="rgb(231,13,6)" fg:x="18778579412" fg:w="1255322387"/><text x="68.3396%" y="271.50">&lt;core..</text></g><g><title>&lt;u32 as core::fmt::num::DisplayInt&gt;::to_u8 (98,938,114 samples, 0.36%)</title><rect x="72.6413%" y="261" width="0.3587%" height="15" fill="rgb(207,181,40)" fg:x="20033901799" fg:w="98938114"/><text x="72.8913%" y="271.50"></text></g><g><title>&lt;u32 as core::ops::arith::Div&gt;::div (146,642,860 samples, 0.53%)</title><rect x="73.0000%" y="261" width="0.5317%" height="15" fill="rgb(254,173,49)" fg:x="20132839913" fg:w="146642860"/><text x="73.2500%" y="271.50"></text></g><g><title>asm_sysvec_hyperv_stimer0 (6,593,395 samples, 0.02%)</title><rect x="73.5317%" y="261" width="0.0239%" height="15" fill="rgb(221,1,38)" fg:x="20279482773" fg:w="6593395"/><text x="73.7817%" y="271.50"></text></g><g><title>sysvec_hyperv_stimer0 (6,593,395 samples, 0.02%)</title><rect x="73.5317%" y="245" width="0.0239%" height="15" fill="rgb(206,124,46)" fg:x="20279482773" fg:w="6593395"/><text x="73.7817%" y="255.50"></text></g><g><title>__sysvec_hyperv_stimer0 (6,593,395 samples, 0.02%)</title><rect x="73.5317%" y="229" width="0.0239%" height="15" fill="rgb(249,21,11)" fg:x="20279482773" fg:w="6593395"/><text x="73.7817%" y="239.50"></text></g><g><title>hrtimer_interrupt (6,593,395 samples, 0.02%)</title><rect x="73.5317%" y="213" width="0.0239%" height="15" fill="rgb(222,201,40)" fg:x="20279482773" fg:w="6593395"/><text x="73.7817%" y="223.50"></text></g><g><title>__hrtimer_run_queues (6,593,395 samples, 0.02%)</title><rect x="73.5317%" y="197" width="0.0239%" height="15" fill="rgb(235,61,29)" fg:x="20279482773" fg:w="6593395"/><text x="73.7817%" y="207.50"></text></g><g><title>tick_sched_timer (6,593,395 samples, 0.02%)</title><rect x="73.5317%" y="181" width="0.0239%" height="15" fill="rgb(219,207,3)" fg:x="20279482773" fg:w="6593395"/><text x="73.7817%" y="191.50"></text></g><g><title>tick_sched_do_timer (6,593,395 samples, 0.02%)</title><rect x="73.5317%" y="165" width="0.0239%" height="15" fill="rgb(222,56,46)" fg:x="20279482773" fg:w="6593395"/><text x="73.7817%" y="175.50"></text></g><g><title>update_wall_time (6,593,395 samples, 0.02%)</title><rect x="73.5317%" y="149" width="0.0239%" height="15" fill="rgb(239,76,54)" fg:x="20279482773" fg:w="6593395"/><text x="73.7817%" y="159.50"></text></g><g><title>timekeeping_advance (6,593,395 samples, 0.02%)</title><rect x="73.5317%" y="133" width="0.0239%" height="15" fill="rgb(231,124,27)" fg:x="20279482773" fg:w="6593395"/><text x="73.7817%" y="143.50"></text></g><g><title>timekeeping_update (6,593,395 samples, 0.02%)</title><rect x="73.5317%" y="117" width="0.0239%" height="15" fill="rgb(249,195,6)" fg:x="20279482773" fg:w="6593395"/><text x="73.7817%" y="127.50"></text></g><g><title>update_fast_timekeeper (6,593,395 samples, 0.02%)</title><rect x="73.5317%" y="101" width="0.0239%" height="15" fill="rgb(237,174,47)" fg:x="20279482773" fg:w="6593395"/><text x="73.7817%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u32&gt;::eq (34,545,883 samples, 0.13%)</title><rect x="73.5556%" y="261" width="0.1253%" height="15" fill="rgb(206,201,31)" fg:x="20286076168" fg:w="34545883"/><text x="73.8056%" y="271.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (762,370,448 samples, 2.76%)</title><rect x="76.4850%" y="245" width="2.7643%" height="15" fill="rgb(231,57,52)" fg:x="21093964248" fg:w="762370448"/><text x="76.7350%" y="255.50">co..</text></g><g><title>core::fmt::Formatter::pad_integral (1,657,036,761 samples, 6.01%)</title><rect x="73.6809%" y="261" width="6.0083%" height="15" fill="rgb(248,177,22)" fg:x="20320622051" fg:w="1657036761"/><text x="73.9309%" y="271.50">core::fm..</text></g><g><title>core::fmt::Formatter::sign_plus (121,324,116 samples, 0.44%)</title><rect x="79.2493%" y="245" width="0.4399%" height="15" fill="rgb(215,211,37)" fg:x="21856334696" fg:w="121324116"/><text x="79.4993%" y="255.50"></text></g><g><title>core::fmt::run (9,466,199,622 samples, 34.32%)</title><rect x="47.0457%" y="325" width="34.3237%" height="15" fill="rgb(241,128,51)" fg:x="12974834427" fg:w="9466199622"/><text x="47.2957%" y="335.50">core::fmt::run</text></g><g><title>core::fmt::rt::Argument::fmt (9,241,666,612 samples, 33.51%)</title><rect x="47.8598%" y="309" width="33.5095%" height="15" fill="rgb(227,165,31)" fg:x="13199367437" fg:w="9241666612"/><text x="48.1098%" y="319.50">core::fmt::rt::Argument::fmt</text></g><g><title>core::fmt::num::&lt;impl core::fmt::LowerHex for i32&gt;::fmt (8,450,106,610 samples, 30.64%)</title><rect x="50.7300%" y="293" width="30.6394%" height="15" fill="rgb(228,167,24)" fg:x="13990927439" fg:w="8450106610"/><text x="50.9800%" y="303.50">core::fmt::num::&lt;impl core::fmt::LowerHex for i32..</text></g><g><title>core::fmt::num::GenericRadix::fmt_int (8,106,086,220 samples, 29.39%)</title><rect x="51.9773%" y="277" width="29.3920%" height="15" fill="rgb(228,143,12)" fg:x="14334947829" fg:w="8106086220"/><text x="52.2273%" y="287.50">core::fmt::num::GenericRadix::fmt_int</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (463,375,237 samples, 1.68%)</title><rect x="79.6892%" y="261" width="1.6802%" height="15" fill="rgb(249,149,8)" fg:x="21977658812" fg:w="463375237"/><text x="79.9392%" y="271.50"></text></g><g><title>core::fmt::Write::write_fmt (11,302,479,499 samples, 40.98%)</title><rect x="40.5364%" y="373" width="40.9819%" height="15" fill="rgb(243,35,44)" fg:x="11179629447" fg:w="11302479499"/><text x="40.7864%" y="383.50">core::fmt::Write::write_fmt</text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (11,302,479,499 samples, 40.98%)</title><rect x="40.5364%" y="357" width="40.9819%" height="15" fill="rgb(246,89,9)" fg:x="11179629447" fg:w="11302479499"/><text x="40.7864%" y="367.50">&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_f..</text></g><g><title>core::fmt::write (11,216,870,372 samples, 40.67%)</title><rect x="40.8468%" y="341" width="40.6715%" height="15" fill="rgb(233,213,13)" fg:x="11265238574" fg:w="11216870372"/><text x="41.0968%" y="351.50">core::fmt::write</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (41,074,897 samples, 0.15%)</title><rect x="81.3693%" y="325" width="0.1489%" height="15" fill="rgb(233,141,41)" fg:x="22441034049" fg:w="41074897"/><text x="81.6193%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (41,074,897 samples, 0.15%)</title><rect x="81.3693%" y="309" width="0.1489%" height="15" fill="rgb(239,167,4)" fg:x="22441034049" fg:w="41074897"/><text x="81.6193%" y="319.50"></text></g><g><title>alloc::fmt::format::format_inner (13,263,500,348 samples, 48.09%)</title><rect x="33.4508%" y="389" width="48.0924%" height="15" fill="rgb(209,217,16)" fg:x="9225460284" fg:w="13263500348"/><text x="33.7008%" y="399.50">alloc::fmt::format::format_inner</text></g><g><title>core::result::Result&lt;T,E&gt;::expect (6,851,686 samples, 0.02%)</title><rect x="81.5183%" y="373" width="0.0248%" height="15" fill="rgb(219,88,35)" fg:x="22482108946" fg:w="6851686"/><text x="81.7683%" y="383.50"></text></g><g><title>alloc::fmt::format (13,332,168,454 samples, 48.34%)</title><rect x="33.2217%" y="437" width="48.3413%" height="15" fill="rgb(220,193,23)" fg:x="9162277446" fg:w="13332168454"/><text x="33.4717%" y="447.50">alloc::fmt::format</text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (13,332,168,454 samples, 48.34%)</title><rect x="33.2217%" y="421" width="48.3413%" height="15" fill="rgb(230,90,52)" fg:x="9162277446" fg:w="13332168454"/><text x="33.4717%" y="431.50">core::option::Option&lt;T&gt;::map_or_else</text></g><g><title>alloc::fmt::format::_{{closure}} (13,332,168,454 samples, 48.34%)</title><rect x="33.2217%" y="405" width="48.3413%" height="15" fill="rgb(252,106,19)" fg:x="9162277446" fg:w="13332168454"/><text x="33.4717%" y="415.50">alloc::fmt::format::_{{closure}}</text></g><g><title>asm_sysvec_hyperv_stimer0 (5,485,268 samples, 0.02%)</title><rect x="81.5431%" y="389" width="0.0199%" height="15" fill="rgb(206,74,20)" fg:x="22488960632" fg:w="5485268"/><text x="81.7931%" y="399.50"></text></g><g><title>sysvec_hyperv_stimer0 (5,485,268 samples, 0.02%)</title><rect x="81.5431%" y="373" width="0.0199%" height="15" fill="rgb(230,138,44)" fg:x="22488960632" fg:w="5485268"/><text x="81.7931%" y="383.50"></text></g><g><title>__sysvec_hyperv_stimer0 (5,485,268 samples, 0.02%)</title><rect x="81.5431%" y="357" width="0.0199%" height="15" fill="rgb(235,182,43)" fg:x="22488960632" fg:w="5485268"/><text x="81.7931%" y="367.50"></text></g><g><title>hv_stimer0_isr (5,485,268 samples, 0.02%)</title><rect x="81.5431%" y="341" width="0.0199%" height="15" fill="rgb(242,16,51)" fg:x="22488960632" fg:w="5485268"/><text x="81.7931%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend (21,679,310,083 samples, 78.61%)</title><rect x="3.9577%" y="533" width="78.6074%" height="15" fill="rgb(248,9,4)" fg:x="1091500266" fg:w="21679310083"/><text x="4.2077%" y="543.50">&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;alloc::string::String&gt;&gt;::extend</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (21,679,310,083 samples, 78.61%)</title><rect x="3.9577%" y="517" width="78.6074%" height="15" fill="rgb(210,31,22)" fg:x="1091500266" fg:w="21679310083"/><text x="4.2077%" y="527.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21,679,310,083 samples, 78.61%)</title><rect x="3.9577%" y="501" width="78.6074%" height="15" fill="rgb(239,54,39)" fg:x="1091500266" fg:w="21679310083"/><text x="4.2077%" y="511.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21,477,748,717 samples, 77.88%)</title><rect x="4.6885%" y="485" width="77.8766%" height="15" fill="rgb(230,99,41)" fg:x="1293061632" fg:w="21477748717"/><text x="4.9385%" y="495.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (21,399,170,322 samples, 77.59%)</title><rect x="4.9735%" y="469" width="77.5916%" height="15" fill="rgb(253,106,12)" fg:x="1371640027" fg:w="21399170322"/><text x="5.2235%" y="479.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>shas::sha::Sha256::digest_string::_{{closure}} (13,897,924,222 samples, 50.39%)</title><rect x="32.1724%" y="453" width="50.3927%" height="15" fill="rgb(213,46,41)" fg:x="8872886127" fg:w="13897924222"/><text x="32.4224%" y="463.50">shas::sha::Sha256::digest_string::_{{closure}}</text></g><g><title>core::fmt::Arguments::new_v1_formatted (276,364,449 samples, 1.00%)</title><rect x="81.5630%" y="437" width="1.0021%" height="15" fill="rgb(215,133,35)" fg:x="22494445900" fg:w="276364449"/><text x="81.8130%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (7,053,995 samples, 0.03%)</title><rect x="82.5651%" y="533" width="0.0256%" height="15" fill="rgb(213,28,5)" fg:x="22770810349" fg:w="7053995"/><text x="82.8151%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,149,471 samples, 0.03%)</title><rect x="82.6168%" y="517" width="0.0259%" height="15" fill="rgb(215,77,49)" fg:x="22785073441" fg:w="7149471"/><text x="82.8668%" y="527.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (7,149,471 samples, 0.03%)</title><rect x="82.6168%" y="501" width="0.0259%" height="15" fill="rgb(248,100,22)" fg:x="22785073441" fg:w="7149471"/><text x="82.8668%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (21,084,173 samples, 0.08%)</title><rect x="83.0868%" y="405" width="0.0764%" height="15" fill="rgb(208,67,9)" fg:x="22914698493" fg:w="21084173"/><text x="83.3368%" y="415.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (70,340,286 samples, 0.26%)</title><rect x="83.1633%" y="405" width="0.2550%" height="15" fill="rgb(219,133,21)" fg:x="22935782666" fg:w="70340286"/><text x="83.4133%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (49,877,312 samples, 0.18%)</title><rect x="83.2375%" y="389" width="0.1809%" height="15" fill="rgb(246,46,29)" fg:x="22956245640" fg:w="49877312"/><text x="83.4875%" y="399.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (49,877,312 samples, 0.18%)</title><rect x="83.2375%" y="373" width="0.1809%" height="15" fill="rgb(246,185,52)" fg:x="22956245640" fg:w="49877312"/><text x="83.4875%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (49,877,312 samples, 0.18%)</title><rect x="83.2375%" y="357" width="0.1809%" height="15" fill="rgb(252,136,11)" fg:x="22956245640" fg:w="49877312"/><text x="83.4875%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (49,877,312 samples, 0.18%)</title><rect x="83.2375%" y="341" width="0.1809%" height="15" fill="rgb(219,138,53)" fg:x="22956245640" fg:w="49877312"/><text x="83.4875%" y="351.50"></text></g><g><title>asm_sysvec_hyperv_stimer0 (7,344,376 samples, 0.03%)</title><rect x="83.3917%" y="325" width="0.0266%" height="15" fill="rgb(211,51,23)" fg:x="22998778576" fg:w="7344376"/><text x="83.6417%" y="335.50"></text></g><g><title>sysvec_hyperv_stimer0 (7,344,376 samples, 0.03%)</title><rect x="83.3917%" y="309" width="0.0266%" height="15" fill="rgb(247,221,28)" fg:x="22998778576" fg:w="7344376"/><text x="83.6417%" y="319.50"></text></g><g><title>__sysvec_hyperv_stimer0 (7,344,376 samples, 0.03%)</title><rect x="83.3917%" y="293" width="0.0266%" height="15" fill="rgb(251,222,45)" fg:x="22998778576" fg:w="7344376"/><text x="83.6417%" y="303.50"></text></g><g><title>hrtimer_interrupt (7,344,376 samples, 0.03%)</title><rect x="83.3917%" y="277" width="0.0266%" height="15" fill="rgb(217,162,53)" fg:x="22998778576" fg:w="7344376"/><text x="83.6417%" y="287.50"></text></g><g><title>__hrtimer_run_queues (7,344,376 samples, 0.03%)</title><rect x="83.3917%" y="261" width="0.0266%" height="15" fill="rgb(229,93,14)" fg:x="22998778576" fg:w="7344376"/><text x="83.6417%" y="271.50"></text></g><g><title>tick_sched_timer (7,344,376 samples, 0.03%)</title><rect x="83.3917%" y="245" width="0.0266%" height="15" fill="rgb(209,67,49)" fg:x="22998778576" fg:w="7344376"/><text x="83.6417%" y="255.50"></text></g><g><title>update_process_times (7,344,376 samples, 0.03%)</title><rect x="83.3917%" y="229" width="0.0266%" height="15" fill="rgb(213,87,29)" fg:x="22998778576" fg:w="7344376"/><text x="83.6417%" y="239.50"></text></g><g><title>scheduler_tick (7,344,376 samples, 0.03%)</title><rect x="83.3917%" y="213" width="0.0266%" height="15" fill="rgb(205,151,52)" fg:x="22998778576" fg:w="7344376"/><text x="83.6417%" y="223.50"></text></g><g><title>perf_event_task_tick (7,344,376 samples, 0.03%)</title><rect x="83.3917%" y="197" width="0.0266%" height="15" fill="rgb(253,215,39)" fg:x="22998778576" fg:w="7344376"/><text x="83.6417%" y="207.50"></text></g><g><title>amd_pmu_disable_all (7,344,376 samples, 0.03%)</title><rect x="83.3917%" y="181" width="0.0266%" height="15" fill="rgb(221,220,41)" fg:x="22998778576" fg:w="7344376"/><text x="83.6417%" y="191.50"></text></g><g><title>x86_pmu_disable_all (7,344,376 samples, 0.03%)</title><rect x="83.3917%" y="165" width="0.0266%" height="15" fill="rgb(218,133,21)" fg:x="22998778576" fg:w="7344376"/><text x="83.6417%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (28,576,738 samples, 0.10%)</title><rect x="83.9278%" y="357" width="0.1036%" height="15" fill="rgb(221,193,43)" fg:x="23146640115" fg:w="28576738"/><text x="84.1778%" y="367.50"></text></g><g><title>core::fmt::write (28,576,738 samples, 0.10%)</title><rect x="83.9278%" y="341" width="0.1036%" height="15" fill="rgb(240,128,52)" fg:x="23146640115" fg:w="28576738"/><text x="84.1778%" y="351.50"></text></g><g><title>core::fmt::Formatter::new (35,941,131 samples, 0.13%)</title><rect x="84.0314%" y="357" width="0.1303%" height="15" fill="rgb(253,114,12)" fg:x="23175216853" fg:w="35941131"/><text x="84.2814%" y="367.50"></text></g><g><title>core::fmt::getcount (7,309,790 samples, 0.03%)</title><rect x="84.1883%" y="341" width="0.0265%" height="15" fill="rgb(215,223,47)" fg:x="23218466745" fg:w="7309790"/><text x="84.4383%" y="351.50"></text></g><g><title>&lt;&amp;T as core::fmt::LowerHex&gt;::fmt (26,901,977 samples, 0.10%)</title><rect x="84.3106%" y="325" width="0.0975%" height="15" fill="rgb(248,225,23)" fg:x="23252197401" fg:w="26901977"/><text x="84.5606%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (34,045,560 samples, 0.12%)</title><rect x="84.8211%" y="133" width="0.1234%" height="15" fill="rgb(250,108,0)" fg:x="23393008141" fg:w="34045560"/><text x="85.0711%" y="143.50"></text></g><g><title>checked_request2size (7,157,220 samples, 0.03%)</title><rect x="85.5296%" y="101" width="0.0260%" height="15" fill="rgb(228,208,7)" fg:x="23588393398" fg:w="7157220"/><text x="85.7796%" y="111.50"></text></g><g><title>__GI___libc_malloc (168,638,224 samples, 0.61%)</title><rect x="85.2783%" y="117" width="0.6115%" height="15" fill="rgb(244,45,10)" fg:x="23519093112" fg:w="168638224"/><text x="85.5283%" y="127.50"></text></g><g><title>tcache_get (92,180,718 samples, 0.33%)</title><rect x="85.5555%" y="101" width="0.3342%" height="15" fill="rgb(207,125,25)" fg:x="23595550618" fg:w="92180718"/><text x="85.8055%" y="111.50"></text></g><g><title>__rdl_alloc (7,306,715 samples, 0.03%)</title><rect x="85.8898%" y="117" width="0.0265%" height="15" fill="rgb(210,195,18)" fg:x="23687731336" fg:w="7306715"/><text x="86.1398%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (288,526,774 samples, 1.05%)</title><rect x="84.9446%" y="133" width="1.0462%" height="15" fill="rgb(249,80,12)" fg:x="23427053701" fg:w="288526774"/><text x="85.1946%" y="143.50"></text></g><g><title>__rust_alloc (20,542,424 samples, 0.07%)</title><rect x="85.9163%" y="117" width="0.0745%" height="15" fill="rgb(221,65,9)" fg:x="23695038051" fg:w="20542424"/><text x="86.1663%" y="127.50"></text></g><g><title>alloc::raw_vec::layout_array (35,633,064 samples, 0.13%)</title><rect x="85.9908%" y="133" width="0.1292%" height="15" fill="rgb(235,49,36)" fg:x="23715580475" fg:w="35633064"/><text x="86.2408%" y="143.50"></text></g><g><title>core::alloc::layout::Layout::repeat (35,633,064 samples, 0.13%)</title><rect x="85.9908%" y="117" width="0.1292%" height="15" fill="rgb(225,32,20)" fg:x="23715580475" fg:w="35633064"/><text x="86.2408%" y="127.50"></text></g><g><title>core::cmp::max (6,887,488 samples, 0.02%)</title><rect x="86.1200%" y="133" width="0.0250%" height="15" fill="rgb(215,141,46)" fg:x="23751213539" fg:w="6887488"/><text x="86.3700%" y="143.50"></text></g><g><title>core::cmp::Ord::max (6,887,488 samples, 0.02%)</title><rect x="86.1200%" y="117" width="0.0250%" height="15" fill="rgb(250,160,47)" fg:x="23751213539" fg:w="6887488"/><text x="86.3700%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (6,887,488 samples, 0.02%)</title><rect x="86.1200%" y="101" width="0.0250%" height="15" fill="rgb(216,222,40)" fg:x="23751213539" fg:w="6887488"/><text x="86.3700%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (407,424,168 samples, 1.48%)</title><rect x="84.7448%" y="213" width="1.4773%" height="15" fill="rgb(234,217,39)" fg:x="23371964980" fg:w="407424168"/><text x="84.9948%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (407,424,168 samples, 1.48%)</title><rect x="84.7448%" y="197" width="1.4773%" height="15" fill="rgb(207,178,40)" fg:x="23371964980" fg:w="407424168"/><text x="84.9948%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (407,424,168 samples, 1.48%)</title><rect x="84.7448%" y="181" width="1.4773%" height="15" fill="rgb(221,136,13)" fg:x="23371964980" fg:w="407424168"/><text x="84.9948%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (400,149,256 samples, 1.45%)</title><rect x="84.7712%" y="165" width="1.4509%" height="15" fill="rgb(249,199,10)" fg:x="23379239892" fg:w="400149256"/><text x="85.0212%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (393,143,571 samples, 1.43%)</title><rect x="84.7966%" y="149" width="1.4255%" height="15" fill="rgb(249,222,13)" fg:x="23386245577" fg:w="393143571"/><text x="85.0466%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (21,288,121 samples, 0.08%)</title><rect x="86.1449%" y="133" width="0.0772%" height="15" fill="rgb(244,185,38)" fg:x="23758101027" fg:w="21288121"/><text x="86.3949%" y="143.50"></text></g><g><title>__memcpy_avx_unaligned_erms (49,861,737 samples, 0.18%)</title><rect x="86.2221%" y="197" width="0.1808%" height="15" fill="rgb(236,202,9)" fg:x="23779389148" fg:w="49861737"/><text x="86.4721%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (77,921,330 samples, 0.28%)</title><rect x="86.2221%" y="213" width="0.2825%" height="15" fill="rgb(250,229,37)" fg:x="23779389148" fg:w="77921330"/><text x="86.4721%" y="223.50"></text></g><g><title>__memmove_avx_unaligned (28,059,593 samples, 0.10%)</title><rect x="86.4029%" y="197" width="0.1017%" height="15" fill="rgb(206,174,23)" fg:x="23829250885" fg:w="28059593"/><text x="86.6529%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (555,962,569 samples, 2.02%)</title><rect x="84.6654%" y="293" width="2.0159%" height="15" fill="rgb(211,33,43)" fg:x="23350069415" fg:w="555962569"/><text x="84.9154%" y="303.50">&lt;..</text></g><g><title>alloc::string::String::push_str (548,682,115 samples, 1.99%)</title><rect x="84.6918%" y="277" width="1.9895%" height="15" fill="rgb(245,58,50)" fg:x="23357349869" fg:w="548682115"/><text x="84.9418%" y="287.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (548,682,115 samples, 1.99%)</title><rect x="84.6918%" y="261" width="1.9895%" height="15" fill="rgb(244,68,36)" fg:x="23357349869" fg:w="548682115"/><text x="84.9418%" y="271.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (548,682,115 samples, 1.99%)</title><rect x="84.6918%" y="245" width="1.9895%" height="15" fill="rgb(232,229,15)" fg:x="23357349869" fg:w="548682115"/><text x="84.9418%" y="255.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (548,682,115 samples, 1.99%)</title><rect x="84.6918%" y="229" width="1.9895%" height="15" fill="rgb(254,30,23)" fg:x="23357349869" fg:w="548682115"/><text x="84.9418%" y="239.50">a..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (48,721,506 samples, 0.18%)</title><rect x="86.5047%" y="213" width="0.1767%" height="15" fill="rgb(235,160,14)" fg:x="23857310478" fg:w="48721506"/><text x="86.7547%" y="223.50"></text></g><g><title>&lt;core::fmt::num::LowerHex as core::fmt::num::GenericRadix&gt;::digit (161,719,133 samples, 0.59%)</title><rect x="86.6813%" y="293" width="0.5864%" height="15" fill="rgb(212,155,44)" fg:x="23906031984" fg:w="161719133"/><text x="86.9313%" y="303.50"></text></g><g><title>&lt;u32 as core::ops::arith::Div&gt;::div (21,629,862 samples, 0.08%)</title><rect x="87.2677%" y="293" width="0.0784%" height="15" fill="rgb(226,2,50)" fg:x="24067751117" fg:w="21629862"/><text x="87.5177%" y="303.50"></text></g><g><title>core::fmt::Formatter::pad_integral (252,144,834 samples, 0.91%)</title><rect x="87.3461%" y="293" width="0.9143%" height="15" fill="rgb(234,177,6)" fg:x="24089380979" fg:w="252144834"/><text x="87.5961%" y="303.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (121,404,231 samples, 0.44%)</title><rect x="87.8202%" y="277" width="0.4402%" height="15" fill="rgb(217,24,9)" fg:x="24220121582" fg:w="121404231"/><text x="88.0702%" y="287.50"></text></g><g><title>alloc::fmt::format (1,624,279,603 samples, 5.89%)</title><rect x="82.7217%" y="469" width="5.8895%" height="15" fill="rgb(220,13,46)" fg:x="22814008010" fg:w="1624279603"/><text x="82.9717%" y="479.50">alloc::..</text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (1,624,279,603 samples, 5.89%)</title><rect x="82.7217%" y="453" width="5.8895%" height="15" fill="rgb(239,221,27)" fg:x="22814008010" fg:w="1624279603"/><text x="82.9717%" y="463.50">core::o..</text></g><g><title>alloc::fmt::format::_{{closure}} (1,624,279,603 samples, 5.89%)</title><rect x="82.7217%" y="437" width="5.8895%" height="15" fill="rgb(222,198,25)" fg:x="22814008010" fg:w="1624279603"/><text x="82.9717%" y="447.50">alloc::..</text></g><g><title>alloc::fmt::format::format_inner (1,624,279,603 samples, 5.89%)</title><rect x="82.7217%" y="421" width="5.8895%" height="15" fill="rgb(211,99,13)" fg:x="22814008010" fg:w="1624279603"/><text x="82.9717%" y="431.50">alloc::..</text></g><g><title>core::fmt::Write::write_fmt (1,432,164,661 samples, 5.19%)</title><rect x="83.4183%" y="405" width="5.1929%" height="15" fill="rgb(232,111,31)" fg:x="23006122952" fg:w="1432164661"/><text x="83.6683%" y="415.50">core::..</text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (1,432,164,661 samples, 5.19%)</title><rect x="83.4183%" y="389" width="5.1929%" height="15" fill="rgb(245,82,37)" fg:x="23006122952" fg:w="1432164661"/><text x="83.6683%" y="399.50">&lt;&amp;mut ..</text></g><g><title>core::fmt::write (1,418,426,344 samples, 5.14%)</title><rect x="83.4681%" y="373" width="5.1431%" height="15" fill="rgb(227,149,46)" fg:x="23019861269" fg:w="1418426344"/><text x="83.7181%" y="383.50">core::..</text></g><g><title>core::fmt::run (1,227,129,629 samples, 4.45%)</title><rect x="84.1618%" y="357" width="4.4495%" height="15" fill="rgb(218,36,50)" fg:x="23211157984" fg:w="1227129629"/><text x="84.4118%" y="367.50">core:..</text></g><g><title>core::fmt::rt::Argument::fmt (1,212,511,078 samples, 4.40%)</title><rect x="84.2148%" y="341" width="4.3965%" height="15" fill="rgb(226,80,48)" fg:x="23225776535" fg:w="1212511078"/><text x="84.4648%" y="351.50">core:..</text></g><g><title>core::fmt::num::&lt;impl core::fmt::LowerHex for i32&gt;::fmt (1,159,188,235 samples, 4.20%)</title><rect x="84.4081%" y="325" width="4.2031%" height="15" fill="rgb(238,224,15)" fg:x="23279099378" fg:w="1159188235"/><text x="84.6581%" y="335.50">core:..</text></g><g><title>core::fmt::num::GenericRadix::fmt_int (1,108,965,230 samples, 4.02%)</title><rect x="84.5902%" y="309" width="4.0210%" height="15" fill="rgb(241,136,10)" fg:x="23329322383" fg:w="1108965230"/><text x="84.8402%" y="319.50">core..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (96,761,800 samples, 0.35%)</title><rect x="88.2604%" y="293" width="0.3509%" height="15" fill="rgb(208,32,45)" fg:x="24341525813" fg:w="96761800"/><text x="88.5104%" y="303.50"></text></g><g><title>shas::sha::Sha256::digest_string (23,588,603,085 samples, 85.53%)</title><rect x="3.1573%" y="581" width="85.5303%" height="15" fill="rgb(207,135,9)" fg:x="870765726" fg:w="23588603085"/><text x="3.4073%" y="591.50">shas::sha::Sha256::digest_string</text></g><g><title>core::iter::traits::iterator::Iterator::collect (23,588,603,085 samples, 85.53%)</title><rect x="3.1573%" y="565" width="85.5303%" height="15" fill="rgb(206,86,44)" fg:x="870765726" fg:w="23588603085"/><text x="3.4073%" y="575.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter (23,588,603,085 samples, 85.53%)</title><rect x="3.1573%" y="549" width="85.5303%" height="15" fill="rgb(245,177,15)" fg:x="870765726" fg:w="23588603085"/><text x="3.4073%" y="559.50">&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;alloc::string::String&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,681,504,467 samples, 6.10%)</title><rect x="82.5907%" y="533" width="6.0970%" height="15" fill="rgb(206,64,50)" fg:x="22777864344" fg:w="1681504467"/><text x="82.8407%" y="543.50">&lt;core::i..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,667,145,899 samples, 6.04%)</title><rect x="82.6427%" y="517" width="6.0449%" height="15" fill="rgb(234,36,40)" fg:x="22792222912" fg:w="1667145899"/><text x="82.8927%" y="527.50">core::op..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,667,145,899 samples, 6.04%)</title><rect x="82.6427%" y="501" width="6.0449%" height="15" fill="rgb(213,64,8)" fg:x="22792222912" fg:w="1667145899"/><text x="82.8927%" y="511.50">core::op..</text></g><g><title>shas::sha::Sha256::digest_string::_{{closure}} (1,667,145,899 samples, 6.04%)</title><rect x="82.6427%" y="485" width="6.0449%" height="15" fill="rgb(210,75,36)" fg:x="22792222912" fg:w="1667145899"/><text x="82.8927%" y="495.50">shas::sh..</text></g><g><title>core::fmt::Arguments::new_v1_formatted (21,081,198 samples, 0.08%)</title><rect x="88.6112%" y="469" width="0.0764%" height="15" fill="rgb(229,88,21)" fg:x="24438287613" fg:w="21081198"/><text x="88.8612%" y="479.50"></text></g><g><title>checked_request2size (21,986,794 samples, 0.08%)</title><rect x="90.1516%" y="373" width="0.0797%" height="15" fill="rgb(252,204,47)" fg:x="24863117802" fg:w="21986794"/><text x="90.4016%" y="383.50"></text></g><g><title>__GI___libc_malloc (312,450,900 samples, 1.13%)</title><rect x="89.2259%" y="389" width="1.1329%" height="15" fill="rgb(208,77,27)" fg:x="24607799051" fg:w="312450900"/><text x="89.4759%" y="399.50"></text></g><g><title>tcache_get (35,145,355 samples, 0.13%)</title><rect x="90.2313%" y="373" width="0.1274%" height="15" fill="rgb(221,76,26)" fg:x="24885104596" fg:w="35145355"/><text x="90.4813%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (354,706,798 samples, 1.29%)</title><rect x="89.2259%" y="437" width="1.2861%" height="15" fill="rgb(225,139,18)" fg:x="24607799051" fg:w="354706798"/><text x="89.4759%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (354,706,798 samples, 1.29%)</title><rect x="89.2259%" y="421" width="1.2861%" height="15" fill="rgb(230,137,11)" fg:x="24607799051" fg:w="354706798"/><text x="89.4759%" y="431.50"></text></g><g><title>alloc::alloc::alloc (354,706,798 samples, 1.29%)</title><rect x="89.2259%" y="405" width="1.2861%" height="15" fill="rgb(212,28,1)" fg:x="24607799051" fg:w="354706798"/><text x="89.4759%" y="415.50"></text></g><g><title>__rust_alloc (42,255,898 samples, 0.15%)</title><rect x="90.3588%" y="389" width="0.1532%" height="15" fill="rgb(248,164,17)" fg:x="24920249951" fg:w="42255898"/><text x="90.6088%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (389,683,874 samples, 1.41%)</title><rect x="89.1256%" y="453" width="1.4130%" height="15" fill="rgb(222,171,42)" fg:x="24580137839" fg:w="389683874"/><text x="89.3756%" y="463.50"></text></g><g><title>alloc::raw_vec::layout_array (7,315,864 samples, 0.03%)</title><rect x="90.5120%" y="437" width="0.0265%" height="15" fill="rgb(243,84,45)" fg:x="24962505849" fg:w="7315864"/><text x="90.7620%" y="447.50"></text></g><g><title>core::alloc::layout::Layout::repeat (7,315,864 samples, 0.03%)</title><rect x="90.5120%" y="421" width="0.0265%" height="15" fill="rgb(252,49,23)" fg:x="24962505849" fg:w="7315864"/><text x="90.7620%" y="431.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (7,315,864 samples, 0.03%)</title><rect x="90.5120%" y="405" width="0.0265%" height="15" fill="rgb(215,19,7)" fg:x="24962505849" fg:w="7315864"/><text x="90.7620%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (7,315,864 samples, 0.03%)</title><rect x="90.5120%" y="389" width="0.0265%" height="15" fill="rgb(238,81,41)" fg:x="24962505849" fg:w="7315864"/><text x="90.7620%" y="399.50"></text></g><g><title>core::intrinsics::unlikely (7,315,864 samples, 0.03%)</title><rect x="90.5120%" y="373" width="0.0265%" height="15" fill="rgb(210,199,37)" fg:x="24962505849" fg:w="7315864"/><text x="90.7620%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (425,322,207 samples, 1.54%)</title><rect x="89.1256%" y="501" width="1.5422%" height="15" fill="rgb(244,192,49)" fg:x="24580137839" fg:w="425322207"/><text x="89.3756%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (425,322,207 samples, 1.54%)</title><rect x="89.1256%" y="485" width="1.5422%" height="15" fill="rgb(226,211,11)" fg:x="24580137839" fg:w="425322207"/><text x="89.3756%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (425,322,207 samples, 1.54%)</title><rect x="89.1256%" y="469" width="1.5422%" height="15" fill="rgb(236,162,54)" fg:x="24580137839" fg:w="425322207"/><text x="89.3756%" y="479.50"></text></g><g><title>shas::sha::Sha256::update (35,638,333 samples, 0.13%)</title><rect x="90.5385%" y="453" width="0.1292%" height="15" fill="rgb(220,229,9)" fg:x="24969821713" fg:w="35638333"/><text x="90.7885%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (516,078,824 samples, 1.87%)</title><rect x="89.1256%" y="565" width="1.8713%" height="15" fill="rgb(250,87,22)" fg:x="24580137839" fg:w="516078824"/><text x="89.3756%" y="575.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (516,078,824 samples, 1.87%)</title><rect x="89.1256%" y="549" width="1.8713%" height="15" fill="rgb(239,43,17)" fg:x="24580137839" fg:w="516078824"/><text x="89.3756%" y="559.50">a..</text></g><g><title>alloc::slice::hack::to_vec (516,078,824 samples, 1.87%)</title><rect x="89.1256%" y="533" width="1.8713%" height="15" fill="rgb(231,177,25)" fg:x="24580137839" fg:w="516078824"/><text x="89.3756%" y="543.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (516,078,824 samples, 1.87%)</title><rect x="89.1256%" y="517" width="1.8713%" height="15" fill="rgb(219,179,1)" fg:x="24580137839" fg:w="516078824"/><text x="89.3756%" y="527.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (90,756,617 samples, 0.33%)</title><rect x="90.6677%" y="501" width="0.3291%" height="15" fill="rgb(238,219,53)" fg:x="25005460046" fg:w="90756617"/><text x="90.9177%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (90,756,617 samples, 0.33%)</title><rect x="90.6677%" y="485" width="0.3291%" height="15" fill="rgb(232,167,36)" fg:x="25005460046" fg:w="90756617"/><text x="90.9177%" y="495.50"></text></g><g><title>__memmove_avx_unaligned (90,756,617 samples, 0.33%)</title><rect x="90.6677%" y="469" width="0.3291%" height="15" fill="rgb(244,19,51)" fg:x="25005460046" fg:w="90756617"/><text x="90.9177%" y="479.50"></text></g><g><title>checked_request2size (6,650,659 samples, 0.02%)</title><rect x="91.8664%" y="357" width="0.0241%" height="15" fill="rgb(224,6,22)" fg:x="25336051118" fg:w="6650659"/><text x="92.1164%" y="367.50"></text></g><g><title>__GI___libc_malloc (226,324,134 samples, 0.82%)</title><rect x="91.3246%" y="373" width="0.8206%" height="15" fill="rgb(224,145,5)" fg:x="25186605698" fg:w="226324134"/><text x="91.5746%" y="383.50"></text></g><g><title>tcache_get (70,228,055 samples, 0.25%)</title><rect x="91.8906%" y="357" width="0.2546%" height="15" fill="rgb(234,130,49)" fg:x="25342701777" fg:w="70228055"/><text x="92.1406%" y="367.50"></text></g><g><title>__rdl_alloc (14,073,959 samples, 0.05%)</title><rect x="92.1452%" y="373" width="0.0510%" height="15" fill="rgb(254,6,2)" fg:x="25412929832" fg:w="14073959"/><text x="92.3952%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (387,724,649 samples, 1.41%)</title><rect x="90.9968%" y="485" width="1.4059%" height="15" fill="rgb(208,96,46)" fg:x="25096216663" fg:w="387724649"/><text x="91.2468%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (387,724,649 samples, 1.41%)</title><rect x="90.9968%" y="469" width="1.4059%" height="15" fill="rgb(239,3,39)" fg:x="25096216663" fg:w="387724649"/><text x="91.2468%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (387,724,649 samples, 1.41%)</title><rect x="90.9968%" y="453" width="1.4059%" height="15" fill="rgb(233,210,1)" fg:x="25096216663" fg:w="387724649"/><text x="91.2468%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (387,724,649 samples, 1.41%)</title><rect x="90.9968%" y="437" width="1.4059%" height="15" fill="rgb(244,137,37)" fg:x="25096216663" fg:w="387724649"/><text x="91.2468%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (297,335,614 samples, 1.08%)</title><rect x="91.3246%" y="421" width="1.0781%" height="15" fill="rgb(240,136,2)" fg:x="25186605698" fg:w="297335614"/><text x="91.5746%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (297,335,614 samples, 1.08%)</title><rect x="91.3246%" y="405" width="1.0781%" height="15" fill="rgb(239,18,37)" fg:x="25186605698" fg:w="297335614"/><text x="91.5746%" y="415.50"></text></g><g><title>alloc::alloc::alloc (297,335,614 samples, 1.08%)</title><rect x="91.3246%" y="389" width="1.0781%" height="15" fill="rgb(218,185,22)" fg:x="25186605698" fg:w="297335614"/><text x="91.5746%" y="399.50"></text></g><g><title>__rust_alloc (56,937,521 samples, 0.21%)</title><rect x="92.1962%" y="373" width="0.2065%" height="15" fill="rgb(225,218,4)" fg:x="25427003791" fg:w="56937521"/><text x="92.4462%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::convert::From&lt;&amp;[T]&gt;&gt;::from (476,168,733 samples, 1.73%)</title><rect x="90.9968%" y="565" width="1.7265%" height="15" fill="rgb(230,182,32)" fg:x="25096216663" fg:w="476168733"/><text x="91.2468%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (476,168,733 samples, 1.73%)</title><rect x="90.9968%" y="549" width="1.7265%" height="15" fill="rgb(242,56,43)" fg:x="25096216663" fg:w="476168733"/><text x="91.2468%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (476,168,733 samples, 1.73%)</title><rect x="90.9968%" y="533" width="1.7265%" height="15" fill="rgb(233,99,24)" fg:x="25096216663" fg:w="476168733"/><text x="91.2468%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (476,168,733 samples, 1.73%)</title><rect x="90.9968%" y="517" width="1.7265%" height="15" fill="rgb(234,209,42)" fg:x="25096216663" fg:w="476168733"/><text x="91.2468%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (476,168,733 samples, 1.73%)</title><rect x="90.9968%" y="501" width="1.7265%" height="15" fill="rgb(227,7,12)" fg:x="25096216663" fg:w="476168733"/><text x="91.2468%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (88,444,084 samples, 0.32%)</title><rect x="92.4027%" y="485" width="0.3207%" height="15" fill="rgb(245,203,43)" fg:x="25483941312" fg:w="88444084"/><text x="92.6527%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (88,444,084 samples, 0.32%)</title><rect x="92.4027%" y="469" width="0.3207%" height="15" fill="rgb(238,205,33)" fg:x="25483941312" fg:w="88444084"/><text x="92.6527%" y="479.50"></text></g><g><title>__memmove_avx_unaligned (88,444,084 samples, 0.32%)</title><rect x="92.4027%" y="453" width="0.3207%" height="15" fill="rgb(231,56,7)" fg:x="25483941312" fg:w="88444084"/><text x="92.6527%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Chunks&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (28,023,109 samples, 0.10%)</title><rect x="92.7234%" y="565" width="0.1016%" height="15" fill="rgb(244,186,29)" fg:x="25572385396" fg:w="28023109"/><text x="92.9734%" y="575.50"></text></g><g><title>checked_request2size (21,180,186 samples, 0.08%)</title><rect x="93.7768%" y="373" width="0.0768%" height="15" fill="rgb(234,111,31)" fg:x="25862925181" fg:w="21180186"/><text x="94.0268%" y="383.50"></text></g><g><title>__GI___libc_malloc (237,613,461 samples, 0.86%)</title><rect x="93.0879%" y="389" width="0.8616%" height="15" fill="rgb(241,149,10)" fg:x="25672916538" fg:w="237613461"/><text x="93.3379%" y="399.50"></text></g><g><title>tcache_get (26,424,632 samples, 0.10%)</title><rect x="93.8536%" y="373" width="0.0958%" height="15" fill="rgb(249,206,44)" fg:x="25884105367" fg:w="26424632"/><text x="94.1036%" y="383.50"></text></g><g><title>__rdl_alloc (21,260,315 samples, 0.08%)</title><rect x="93.9495%" y="389" width="0.0771%" height="15" fill="rgb(251,153,30)" fg:x="25910529999" fg:w="21260315"/><text x="94.1995%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (353,153,017 samples, 1.28%)</title><rect x="92.8250%" y="501" width="1.2805%" height="15" fill="rgb(239,152,38)" fg:x="25600408505" fg:w="353153017"/><text x="93.0750%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (353,153,017 samples, 1.28%)</title><rect x="92.8250%" y="485" width="1.2805%" height="15" fill="rgb(249,139,47)" fg:x="25600408505" fg:w="353153017"/><text x="93.0750%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (353,153,017 samples, 1.28%)</title><rect x="92.8250%" y="469" width="1.2805%" height="15" fill="rgb(244,64,35)" fg:x="25600408505" fg:w="353153017"/><text x="93.0750%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (353,153,017 samples, 1.28%)</title><rect x="92.8250%" y="453" width="1.2805%" height="15" fill="rgb(216,46,15)" fg:x="25600408505" fg:w="353153017"/><text x="93.0750%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (280,644,984 samples, 1.02%)</title><rect x="93.0879%" y="437" width="1.0176%" height="15" fill="rgb(250,74,19)" fg:x="25672916538" fg:w="280644984"/><text x="93.3379%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (280,644,984 samples, 1.02%)</title><rect x="93.0879%" y="421" width="1.0176%" height="15" fill="rgb(249,42,33)" fg:x="25672916538" fg:w="280644984"/><text x="93.3379%" y="431.50"></text></g><g><title>alloc::alloc::alloc (280,644,984 samples, 1.02%)</title><rect x="93.0879%" y="405" width="1.0176%" height="15" fill="rgb(242,149,17)" fg:x="25672916538" fg:w="280644984"/><text x="93.3379%" y="415.50"></text></g><g><title>__rust_alloc (21,771,208 samples, 0.08%)</title><rect x="94.0265%" y="389" width="0.0789%" height="15" fill="rgb(244,29,21)" fg:x="25931790314" fg:w="21771208"/><text x="94.2765%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (423,537,544 samples, 1.54%)</title><rect x="92.8250%" y="565" width="1.5357%" height="15" fill="rgb(220,130,37)" fg:x="25600408505" fg:w="423537544"/><text x="93.0750%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (423,537,544 samples, 1.54%)</title><rect x="92.8250%" y="549" width="1.5357%" height="15" fill="rgb(211,67,2)" fg:x="25600408505" fg:w="423537544"/><text x="93.0750%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (423,537,544 samples, 1.54%)</title><rect x="92.8250%" y="533" width="1.5357%" height="15" fill="rgb(235,68,52)" fg:x="25600408505" fg:w="423537544"/><text x="93.0750%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (423,537,544 samples, 1.54%)</title><rect x="92.8250%" y="517" width="1.5357%" height="15" fill="rgb(246,142,3)" fg:x="25600408505" fg:w="423537544"/><text x="93.0750%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (70,384,527 samples, 0.26%)</title><rect x="94.1055%" y="501" width="0.2552%" height="15" fill="rgb(241,25,7)" fg:x="25953561522" fg:w="70384527"/><text x="94.3555%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (70,384,527 samples, 0.26%)</title><rect x="94.1055%" y="485" width="0.2552%" height="15" fill="rgb(242,119,39)" fg:x="25953561522" fg:w="70384527"/><text x="94.3555%" y="495.50"></text></g><g><title>__memmove_avx_unaligned (70,384,527 samples, 0.26%)</title><rect x="94.1055%" y="469" width="0.2552%" height="15" fill="rgb(241,98,45)" fg:x="25953561522" fg:w="70384527"/><text x="94.3555%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (21,115,912 samples, 0.08%)</title><rect x="94.3607%" y="533" width="0.0766%" height="15" fill="rgb(254,28,30)" fg:x="26023946049" fg:w="21115912"/><text x="94.6107%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (14,620,776 samples, 0.05%)</title><rect x="94.4630%" y="485" width="0.0530%" height="15" fill="rgb(241,142,54)" fg:x="26052151258" fg:w="14620776"/><text x="94.7130%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (14,620,776 samples, 0.05%)</title><rect x="94.4630%" y="469" width="0.0530%" height="15" fill="rgb(222,85,15)" fg:x="26052151258" fg:w="14620776"/><text x="94.7130%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (49,667,892 samples, 0.18%)</title><rect x="94.5679%" y="453" width="0.1801%" height="15" fill="rgb(210,85,47)" fg:x="26081089967" fg:w="49667892"/><text x="94.8179%" y="463.50"></text></g><g><title>__GI___libc_malloc (248,300,775 samples, 0.90%)</title><rect x="95.0773%" y="437" width="0.9003%" height="15" fill="rgb(224,206,25)" fg:x="26221571968" fg:w="248300775"/><text x="95.3273%" y="447.50"></text></g><g><title>tcache_get (106,172,593 samples, 0.38%)</title><rect x="95.5926%" y="421" width="0.3850%" height="15" fill="rgb(243,201,19)" fg:x="26363700150" fg:w="106172593"/><text x="95.8426%" y="431.50"></text></g><g><title>__rdl_alloc (14,296,170 samples, 0.05%)</title><rect x="95.9776%" y="437" width="0.0518%" height="15" fill="rgb(236,59,4)" fg:x="26469872743" fg:w="14296170"/><text x="96.2276%" y="447.50"></text></g><g><title>__rust_alloc (28,437,177 samples, 0.10%)</title><rect x="96.0294%" y="437" width="0.1031%" height="15" fill="rgb(254,179,45)" fg:x="26484168913" fg:w="28437177"/><text x="96.2794%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (403,363,132 samples, 1.46%)</title><rect x="94.7480%" y="453" width="1.4626%" height="15" fill="rgb(226,14,10)" fg:x="26130757859" fg:w="403363132"/><text x="94.9980%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (21,514,901 samples, 0.08%)</title><rect x="96.1325%" y="437" width="0.0780%" height="15" fill="rgb(244,27,41)" fg:x="26512606090" fg:w="21514901"/><text x="96.3825%" y="447.50"></text></g><g><title>alloc::raw_vec::layout_array (36,198,974 samples, 0.13%)</title><rect x="96.2105%" y="453" width="0.1313%" height="15" fill="rgb(235,35,32)" fg:x="26534120991" fg:w="36198974"/><text x="96.4605%" y="463.50"></text></g><g><title>core::alloc::layout::Layout::repeat (36,198,974 samples, 0.13%)</title><rect x="96.2105%" y="437" width="0.1313%" height="15" fill="rgb(218,68,31)" fg:x="26534120991" fg:w="36198974"/><text x="96.4605%" y="447.50"></text></g><g><title>core::alloc::layout::Layout::pad_to_align (14,368,249 samples, 0.05%)</title><rect x="96.2897%" y="421" width="0.0521%" height="15" fill="rgb(207,120,37)" fg:x="26555951716" fg:w="14368249"/><text x="96.5397%" y="431.50"></text></g><g><title>core::alloc::layout::Layout::size_rounded_up_to_custom_align (14,368,249 samples, 0.05%)</title><rect x="96.2897%" y="405" width="0.0521%" height="15" fill="rgb(227,98,0)" fg:x="26555951716" fg:w="14368249"/><text x="96.5397%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (539,101,917 samples, 1.95%)</title><rect x="94.4373%" y="533" width="1.9547%" height="15" fill="rgb(207,7,3)" fg:x="26045061961" fg:w="539101917"/><text x="94.6873%" y="543.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (539,101,917 samples, 1.95%)</title><rect x="94.4373%" y="517" width="1.9547%" height="15" fill="rgb(206,98,19)" fg:x="26045061961" fg:w="539101917"/><text x="94.6873%" y="527.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (539,101,917 samples, 1.95%)</title><rect x="94.4373%" y="501" width="1.9547%" height="15" fill="rgb(217,5,26)" fg:x="26045061961" fg:w="539101917"/><text x="94.6873%" y="511.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (517,391,844 samples, 1.88%)</title><rect x="94.5160%" y="485" width="1.8760%" height="15" fill="rgb(235,190,38)" fg:x="26066772034" fg:w="517391844"/><text x="94.7660%" y="495.50">a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (503,073,911 samples, 1.82%)</title><rect x="94.5679%" y="469" width="1.8241%" height="15" fill="rgb(247,86,24)" fg:x="26081089967" fg:w="503073911"/><text x="94.8179%" y="479.50">a..</text></g><g><title>alloc::raw_vec::min_non_zero_cap (13,843,913 samples, 0.05%)</title><rect x="96.3418%" y="453" width="0.0502%" height="15" fill="rgb(205,101,16)" fg:x="26570319965" fg:w="13843913"/><text x="96.5918%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (76,900,693 samples, 0.28%)</title><rect x="96.3920%" y="533" width="0.2788%" height="15" fill="rgb(246,168,33)" fg:x="26584163878" fg:w="76900693"/><text x="96.6420%" y="543.50"></text></g><g><title>__memmove_avx_unaligned (76,900,693 samples, 0.28%)</title><rect x="96.3920%" y="517" width="0.2788%" height="15" fill="rgb(231,114,1)" fg:x="26584163878" fg:w="76900693"/><text x="96.6420%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (28,047,949 samples, 0.10%)</title><rect x="96.6708%" y="533" width="0.1017%" height="15" fill="rgb(207,184,53)" fg:x="26661064571" fg:w="28047949"/><text x="96.9208%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (679,769,418 samples, 2.46%)</title><rect x="94.3607%" y="565" width="2.4648%" height="15" fill="rgb(224,95,51)" fg:x="26023946049" fg:w="679769418"/><text x="94.6107%" y="575.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (679,769,418 samples, 2.46%)</title><rect x="94.3607%" y="549" width="2.4648%" height="15" fill="rgb(212,188,45)" fg:x="26023946049" fg:w="679769418"/><text x="94.6107%" y="559.50">al..</text></g><g><title>shas::sha::Sha256::update (14,602,947 samples, 0.05%)</title><rect x="96.7725%" y="533" width="0.0529%" height="15" fill="rgb(223,154,38)" fg:x="26689112520" fg:w="14602947"/><text x="97.0225%" y="543.50"></text></g><g><title>__GI___libc_free (712,273,202 samples, 2.58%)</title><rect x="96.9573%" y="469" width="2.5826%" height="15" fill="rgb(251,22,52)" fg:x="26740083033" fg:w="712273202"/><text x="97.2073%" y="479.50">__..</text></g><g><title>_int_free (484,603,029 samples, 1.76%)</title><rect x="97.7829%" y="453" width="1.7571%" height="15" fill="rgb(229,209,22)" fg:x="26967753206" fg:w="484603029"/><text x="98.0329%" y="463.50"></text></g><g><title>tcache_put (104,718,042 samples, 0.38%)</title><rect x="99.1603%" y="437" width="0.3797%" height="15" fill="rgb(234,138,34)" fg:x="27347638193" fg:w="104718042"/><text x="99.4103%" y="447.50"></text></g><g><title>__rdl_dealloc (13,890,775 samples, 0.05%)</title><rect x="99.5400%" y="469" width="0.0504%" height="15" fill="rgb(212,95,11)" fg:x="27452356235" fg:w="13890775"/><text x="99.7900%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (804,924,495 samples, 2.92%)</title><rect x="96.9041%" y="501" width="2.9186%" height="15" fill="rgb(240,179,47)" fg:x="26725402413" fg:w="804924495"/><text x="97.1541%" y="511.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (804,924,495 samples, 2.92%)</title><rect x="96.9041%" y="485" width="2.9186%" height="15" fill="rgb(240,163,11)" fg:x="26725402413" fg:w="804924495"/><text x="97.1541%" y="495.50">al..</text></g><g><title>__rust_dealloc (64,079,898 samples, 0.23%)</title><rect x="99.5904%" y="469" width="0.2323%" height="15" fill="rgb(236,37,12)" fg:x="27466247010" fg:w="64079898"/><text x="99.8404%" y="479.50"></text></g><g><title>_start (27,452,607,720 samples, 99.54%)</title><rect x="0.3070%" y="725" width="99.5409%" height="15" fill="rgb(232,164,16)" fg:x="84663343" fg:w="27452607720"/><text x="0.5570%" y="735.50">_start</text></g><g><title>__libc_start_main_impl (27,452,607,720 samples, 99.54%)</title><rect x="0.3070%" y="709" width="99.5409%" height="15" fill="rgb(244,205,15)" fg:x="84663343" fg:w="27452607720"/><text x="0.5570%" y="719.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (27,452,607,720 samples, 99.54%)</title><rect x="0.3070%" y="693" width="99.5409%" height="15" fill="rgb(223,117,47)" fg:x="84663343" fg:w="27452607720"/><text x="0.5570%" y="703.50">__libc_start_call_main</text></g><g><title>main (27,452,607,720 samples, 99.54%)</title><rect x="0.3070%" y="677" width="99.5409%" height="15" fill="rgb(244,107,35)" fg:x="84663343" fg:w="27452607720"/><text x="0.5570%" y="687.50">main</text></g><g><title>std::rt::lang_start_internal (27,452,607,720 samples, 99.54%)</title><rect x="0.3070%" y="661" width="99.5409%" height="15" fill="rgb(205,140,8)" fg:x="84663343" fg:w="27452607720"/><text x="0.5570%" y="671.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (27,452,607,720 samples, 99.54%)</title><rect x="0.3070%" y="645" width="99.5409%" height="15" fill="rgb(228,84,46)" fg:x="84663343" fg:w="27452607720"/><text x="0.5570%" y="655.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (27,452,607,720 samples, 99.54%)</title><rect x="0.3070%" y="629" width="99.5409%" height="15" fill="rgb(254,188,9)" fg:x="84663343" fg:w="27452607720"/><text x="0.5570%" y="639.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (27,452,607,720 samples, 99.54%)</title><rect x="0.3070%" y="613" width="99.5409%" height="15" fill="rgb(206,112,54)" fg:x="84663343" fg:w="27452607720"/><text x="0.5570%" y="623.50">core::ops::function::FnOnce::call_once</text></g><g><title>shas::main (27,452,607,720 samples, 99.54%)</title><rect x="0.3070%" y="597" width="99.5409%" height="15" fill="rgb(216,84,49)" fg:x="84663343" fg:w="27452607720"/><text x="0.5570%" y="607.50">shas::main</text></g><g><title>shas::sha::Sha256::update (3,077,902,252 samples, 11.16%)</title><rect x="88.6877%" y="581" width="11.1602%" height="15" fill="rgb(214,194,35)" fg:x="24459368811" fg:w="3077902252"/><text x="88.9377%" y="591.50">shas::sha::Sha25..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (833,555,596 samples, 3.02%)</title><rect x="96.8255%" y="565" width="3.0224%" height="15" fill="rgb(249,28,3)" fg:x="26703715467" fg:w="833555596"/><text x="97.0755%" y="575.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (833,555,596 samples, 3.02%)</title><rect x="96.8255%" y="549" width="3.0224%" height="15" fill="rgb(222,56,52)" fg:x="26703715467" fg:w="833555596"/><text x="97.0755%" y="559.50">cor..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (833,555,596 samples, 3.02%)</title><rect x="96.8255%" y="533" width="3.0224%" height="15" fill="rgb(245,217,50)" fg:x="26703715467" fg:w="833555596"/><text x="97.0755%" y="543.50">&lt;al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (811,868,650 samples, 2.94%)</title><rect x="96.9041%" y="517" width="2.9438%" height="15" fill="rgb(213,201,24)" fg:x="26725402413" fg:w="811868650"/><text x="97.1541%" y="527.50">al..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (6,944,155 samples, 0.03%)</title><rect x="99.8227%" y="501" width="0.0252%" height="15" fill="rgb(248,116,28)" fg:x="27530326908" fg:w="6944155"/><text x="100.0727%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (7,299,959 samples, 0.03%)</title><rect x="99.8479%" y="725" width="0.0265%" height="15" fill="rgb(219,72,43)" fg:x="27537271063" fg:w="7299959"/><text x="100.0979%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (7,299,959 samples, 0.03%)</title><rect x="99.8479%" y="709" width="0.0265%" height="15" fill="rgb(209,138,14)" fg:x="27537271063" fg:w="7299959"/><text x="100.0979%" y="719.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (7,299,959 samples, 0.03%)</title><rect x="99.8479%" y="693" width="0.0265%" height="15" fill="rgb(222,18,33)" fg:x="27537271063" fg:w="7299959"/><text x="100.0979%" y="703.50"></text></g><g><title>core::fmt::write (7,299,959 samples, 0.03%)</title><rect x="99.8479%" y="677" width="0.0265%" height="15" fill="rgb(213,199,7)" fg:x="27537271063" fg:w="7299959"/><text x="100.0979%" y="687.50"></text></g><g><title>all (27,579,222,510 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(250,110,10)" fg:x="0" fg:w="27579222510"/><text x="0.2500%" y="767.50"></text></g><g><title>shas (27,579,221,002 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(248,123,6)" fg:x="1508" fg:w="27579221002"/><text x="0.2500%" y="751.50">shas</text></g><g><title>core::fmt::num::&lt;impl core::fmt::LowerHex for i32&gt;::fmt (34,651,488 samples, 0.13%)</title><rect x="99.8744%" y="725" width="0.1256%" height="15" fill="rgb(206,91,31)" fg:x="27544571022" fg:w="34651488"/><text x="100.1244%" y="735.50"></text></g><g><title>core::fmt::num::GenericRadix::fmt_int (34,651,488 samples, 0.13%)</title><rect x="99.8744%" y="709" width="0.1256%" height="15" fill="rgb(211,154,13)" fg:x="27544571022" fg:w="34651488"/><text x="100.1244%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (34,651,488 samples, 0.13%)</title><rect x="99.8744%" y="693" width="0.1256%" height="15" fill="rgb(225,148,7)" fg:x="27544571022" fg:w="34651488"/><text x="100.1244%" y="703.50"></text></g></svg></svg>